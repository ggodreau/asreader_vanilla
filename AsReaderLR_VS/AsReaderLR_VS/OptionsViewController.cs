// This file has been autogenerated from a class added in the UI designer.

using System;
using AsReaderGunSDK;
using Foundation;
using UIKit;
using System.Collections.Generic;
using CoreGraphics;

namespace AsReaderLR_VS
{
    public partial class OptionsViewController : UIViewController
	{
        int PICKER_VIEW_BUZZER = 0;
		int PICKER_VIEW_KEY_ACTION = 1;
		int PICKER_VIEW_MASK_TYPE = 2;
		int PICKER_VIEW_Vibrator = 3;
		int PICKER_VIEW_QValue = 4;
		int PICKER_VIEW_Algorithm = 5;
		int PICKER_VIEW_MaxQValue = 6;
		int PICKER_VIEW_MinQValue = 7;
		int PICKER_VIEW_Link_Profile = 8;
		int PICKER_VIEW_Default_Link_Profile = 9;

		int ALERT_VIEW_INTERVAL_TIME = 0;
		int ALERT_VIEW_IDLE_TIME = 1;
		int ALERT_VIEW_AUTO_OFF_TIME = 2;
		int ALERT_VIEW_BATTERY_INTERVAL = 3;
		int ALERT_VIEW_SLEEP_TIME = 4;

		AppDelegate appDelegate;
		SystemSetting systemSetting;

		string[] buzzerPickerData = {"Off", "Low", "High" };
		string[] vibratorPickerData = { "Off", "On" };
		string[] keyActionPickerData = { "Not Used", "Used" };
		string[] maskTypePickerData = { "No Mask", "Selection Mask", "EPC Mask" };
		string[] qValuePickerData = { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15" };
		string[] linkProfilePickerData = { "0", "1", "2", "3" };
		string[] algorithmPickerData = { "Fixed Q", "Dynamic Q" };

        List<NSObject> lbtItemData;
        BuzzerState buzzerValue;
        VibratorState vibratorValue;
        int inventoryTimeValue;
		int idleTimeValue;
		int autoOffTimeValue;
		int keyActionValue;

        string batteryIntervalValue;
        MaskType maskTypeValue;
        AlgorithmType algorithmValue;

        int qValue;
        int minQValue;
        int maxQValue;

        int linkProfileValue;
        int defaultLinkProfileValue;
        int sleepTimeValue;

        bool isJapan;

        AsReaderGUNManager gunManager = AsReaderGUNManager.sharedAsReaderGUNManager();

        AsReader mReader
        {
            get => gunManager.getCurrentAsReader();
        }

		public OptionsViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            isJapan = false;
			appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
            tableView.DataSource = new MyTableViewSource(this);
            tableView.Delegate = new MyTableViewDelegate(this);

            pickerView.DataSource = new MyPickerViewDataSource(this);
            pickerView.Delegate = new MyPickerViewDelegate(this);

			systemSetting = SystemSetting.sharedSystemSetting();
            scrollView.ContentSize = new CGSize(0, 1000);
            scrollView.ShowsVerticalScrollIndicator = false;
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            gunManager.onAsReaderGUNDisconnected = () => {
                AppDelegate.dismissGlobalHUD();
                NavigationController.PopToRootViewController(true);
            };
            gunManager.onAsReaderLeftModeKeyEvent = (status) => OnAsReaderLeftModeKeyEvent(status);
            gunManager.onAsReaderRightModeKeyEvent = (status) => OnAsReaderRightModeKeyEvent(status);
            gunManager.onAsReaderTriggerKeyEvent = (status) => OnAsReaderTriggerKeyEvent(status);
            gunManager.updateDeviceState = (error) => UpdateDeviceState(error);
        }
        bool OnAsReaderTriggerKeyEvent(bool status)
        {
            return false;
        }

        bool OnAsReaderLeftModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }

        bool OnAsReaderRightModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }
        void UpdateDeviceState(ResultCode error)
        {
            if (error != ResultCode.NoError)
            {
                UIAlertView alert = new UIAlertView("Error", "Failed to get response. Try again.", null, "OK", null);
                alert.Show();
                NavigationController.PopViewController(true);
            }
        }
        public override void ViewDidAppear(bool animated)
        {
			if (mReader == null)
			{
				return;
			}
            AppDelegate.showGlobalProgressHUDWithTitle("Loading...");

            vibratorValue = mReader.Vibrator;
            buzzerValue = mReader.Buzzer;
            inventoryTimeValue = mReader.InventoryTime;
			idleTimeValue = mReader.IdleTime;
			autoOffTimeValue = mReader.AutoOffTime;
			qValue = mReader.QValue;
			maxQValue = mReader.MaxQ;
			minQValue = mReader.MinQ;
			algorithmValue = mReader.Algorithm;
			linkProfileValue = mReader.LinkProfileValue;
			defaultLinkProfileValue = mReader.DefaultLinkProfileValue;
            maskTypeValue = (MaskType)mReader.MaskTypeValue;
			sleepTimeValue = mReader.SleepTime;
            isJapan = mReader.RegionName.StartsWith("Japan", StringComparison.CurrentCulture);
            if (isJapan)
            {
                setLBTButton.Hidden = false;
                initLbtItemData();
            }
            else
            {
                setLBTButton.Hidden = true;
			}
            initViewData();
            tableView.ReloadData();
            NavigationController.View.AddSubview(shadowView);
			AppDelegate.dismissGlobalHUD();
		}
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            gunManager.init();
        }
		public override void DidReceiveMemoryWarning()
		{
			base.DidReceiveMemoryWarning();
		}		
        #pragma mark - Init
        void initLbtItemData()
        {
            if (lbtItemData == null)
            {
                List<NSObject> lbtItems = new List<NSObject>(mReader.LBT);
                LbtItem lbtI = new LbtItem();
                foreach (LbtItem lbtItem in lbtItems)
                {
                    lbtItem.Frequency = mReader.GetLBTFrequency(lbtItem.MSlot);
                    if (lbtItem.Frequency == "0 HZ")
                    {
                        lbtI = lbtItem;
                    }
                }
                lbtItems.Remove(lbtI);
                lbtItemData = lbtItems;
            }
        }

        #pragma mark - IBAction
        partial void minQValueBtnTapped(NSObject sender)
        {
			pickerView.Tag = PICKER_VIEW_MinQValue;
			pickerView.ReloadAllComponents();
			if (minQValueTextField.Text != "")
			{
				int index = Array.IndexOf(qValuePickerData, minQValueTextField.Text);
				pickerView.Select((nint)index, 0, false);
			}
			else
			{
				pickerView.Select(0, 0, false);
			}
			qValuePickerTopView.Hidden = false;
            showPickerView();
        }
        partial void maxQValueBtnTapped(NSObject sender)
        {
			pickerView.Tag = PICKER_VIEW_MaxQValue;
			pickerView.ReloadAllComponents();
            if (maxQValueTextField.Text != "")
			{
				int index = Array.IndexOf(qValuePickerData, maxQValueTextField.Text);
				pickerView.Select((nint)index, 0, false);
			}
			else
			{
				pickerView.Select(0, 0, false);
			}
			qValuePickerTopView.Hidden = false;
			showPickerView();
        }
        partial void qValueBtnTapped(NSObject sender)
        {
			pickerView.Tag = PICKER_VIEW_QValue;
			pickerView.ReloadAllComponents();
            if (qValueTextField.Text != "")
			{
				int index = Array.IndexOf(qValuePickerData, qValueTextField.Text);
				pickerView.Select((nint)index, 0, false);
			}
			else
			{
				pickerView.Select(0, 0, false);
			}
			qValuePickerTopView.Hidden = false;
			showPickerView();
        }
        partial void algorithmBtnTapped(NSObject sender)
        {
			pickerView.Tag = PICKER_VIEW_Algorithm;
			pickerView.ReloadAllComponents();
            if (algorithmTextField.Text != "")
			{
				int index = Array.IndexOf(algorithmPickerData, algorithmTextField.Text);
				pickerView.Select((nint)index, 0, false);
			}
			else
			{
				pickerView.Select(0, 0, false);
			}
			algorithmPickerTopView.Hidden = false;
			showPickerView();
        }
        partial void linkProfileBtnTapped(NSObject sender)
        {
			pickerView.Tag = PICKER_VIEW_Link_Profile;
			pickerView.ReloadAllComponents();
            if (linkProfileTextField.Text != "")
			{
				int index = Array.IndexOf(linkProfilePickerData, linkProfileTextField.Text);
				pickerView.Select((nint)index, 0, false);
			}
			else
			{
				pickerView.Select(0, 0, false);
			}
			LinkProfileTableTopView.Hidden = false;
			showPickerView();
        }
        partial void defaultLinkProfileBtnTapped(NSObject sender)
        {
			pickerView.Tag = PICKER_VIEW_Default_Link_Profile;
			pickerView.ReloadAllComponents();
            if (defaultLinkProfileTextField.Text != "")
			{
				int index = Array.IndexOf(linkProfilePickerData, defaultLinkProfileTextField.Text);
				pickerView.Select((nint)index, 0, false);
			}
			else
			{
				pickerView.Select(0, 0, false);
			}
			LinkProfileTableTopView.Hidden = false;
			showPickerView();
        }
        partial void buzzerBtnTapped(NSObject sender)
        {
			pickerView.Tag = PICKER_VIEW_BUZZER;
			pickerView.ReloadAllComponents();
            if (buzzerTextField.Text != "")
			{
				int index = Array.IndexOf(buzzerPickerData, buzzerTextField.Text);
				pickerView.Select((nint)index, 0, false);
			}
			else
			{
				pickerView.Select(0, 0, false);
			}
			buzzerPickerTopView.Hidden = false;
			showPickerView();
        }
        partial void vibratorBtnTapped(NSObject sender)
        {
			pickerView.Tag = PICKER_VIEW_Vibrator;
			pickerView.ReloadAllComponents();
            if (vibratorTextField.Text != "")
			{
				int index = Array.IndexOf(vibratorPickerData, vibratorTextField.Text);
				pickerView.Select((nint)index, 0, false);
			}
			else
			{
				pickerView.Select(0, 0, false);
			}
			vibratorPickerTopView.Hidden = false;
			showPickerView();
        }
        partial void keyActionBtnTapped(NSObject sender)
        {
			pickerView.Tag = PICKER_VIEW_KEY_ACTION;
			pickerView.ReloadAllComponents();
            if (keyActionTextField.Text != "")
			{
				int index = Array.IndexOf(keyActionPickerData, keyActionTextField.Text);
				pickerView.Select((nint)index, 0, false);
			}
			else
			{
				pickerView.Select(0, 0, false);
			}
			keyActionPickerTopView.Hidden = false;
			showPickerView();
        }
		partial void maskTypeBtnTapped(NSObject sender)
		{
			pickerView.Tag = PICKER_VIEW_MASK_TYPE;
			pickerView.ReloadAllComponents();
            if (maskTypeTextField.Text != "")
			{
				int index = Array.IndexOf(maskTypePickerData, maskTypeTextField.Text);
				pickerView.Select((nint)index, 0, false);
			}
			else
			{
				pickerView.Select(0, 0, false);
			}
			maskTypePickerTopView.Hidden = false;
			showPickerView();
		}
        partial void inventoryTimeBtnTapped(NSObject sender)
        {
			UIAlertView alert = new UIAlertView("Inventory Time:", "Please enter inventory time.", new MyAlertViewDelegate(this), "Cancel", null);
			alert.AlertViewStyle = UIAlertViewStyle.PlainTextInput;
            alert.GetTextField(0).KeyboardType = UIKeyboardType.NumberPad;
			alert.Tag = ALERT_VIEW_INTERVAL_TIME;
			alert.AddButton("OK");
			alert.Show();
        }
        partial void idleTimeBtnTapped(NSObject sender)
        {
			UIAlertView alert = new UIAlertView("Idle Time:", "Please enter idle time.", new MyAlertViewDelegate(this), "Cancel", null);
			alert.AlertViewStyle = UIAlertViewStyle.PlainTextInput;
			alert.GetTextField(0).KeyboardType = UIKeyboardType.NumberPad;
			alert.Tag = ALERT_VIEW_IDLE_TIME;
			alert.AddButton("OK");
			alert.Show();
        }
        partial void autoOffTimeBtnTapped(NSObject sender)
        {
			UIAlertView alert = new UIAlertView("Auto Off Time:", "Please enter auto off time.", new MyAlertViewDelegate(this), "Cancel", null);
			alert.AlertViewStyle = UIAlertViewStyle.PlainTextInput;
			alert.GetTextField(0).KeyboardType = UIKeyboardType.NumberPad;
			alert.Tag = ALERT_VIEW_AUTO_OFF_TIME;
			alert.AddButton("OK");
			alert.Show();
        }
        partial void batteryIntervalBtnTapped(NSObject sender)
        {
			UIAlertView alert = new UIAlertView("Battery Interval:", "Please enter battery interval.", new MyAlertViewDelegate(this), "Cancel", null);
			alert.AlertViewStyle = UIAlertViewStyle.PlainTextInput;
			alert.GetTextField(0).KeyboardType = UIKeyboardType.NumberPad;
			alert.Tag = ALERT_VIEW_BATTERY_INTERVAL;
			alert.AddButton("OK");
			alert.Show();
        }
        partial void sleepTimeBtnTapped(NSObject sender)
        {
			UIAlertView alert = new UIAlertView("sleep Time:", "Please enter sleep time.", new MyAlertViewDelegate(this), "Cancel", null);
			alert.AlertViewStyle = UIAlertViewStyle.PlainTextInput;
			alert.GetTextField(0).KeyboardType = UIKeyboardType.NumberPad;
			alert.Tag = ALERT_VIEW_SLEEP_TIME;
			alert.AddButton("OK");
			alert.Show();
        }
        partial void saveBtnTapped(NSObject sender)
        {
            mReader.Buzzer = buzzerValue;
            mReader.Vibrator = vibratorValue;
            mReader.InventoryTime = inventoryTimeValue;
            mReader.IdleTime = idleTimeValue;
            mReader.AutoOffTime = autoOffTimeValue;
            mReader.QValue = qValue;
            mReader.Algorithm = algorithmValue;
            mReader.MaxQ = maxQValue;
            mReader.MinQ = minQValue;
            mReader.SleepTime = sleepTimeValue;
            mReader.MaskTypeValue = (int)maskTypeValue;

            UserData.setBatteryInterval(batteryIntervalValue);

            systemSetting.setBuzzer((int)buzzerValue);
			systemSetting.setVibrator((int)vibratorValue);
			systemSetting.setInventoryTime((int)inventoryTimeValue);
			systemSetting.setIdleTime((int)idleTimeValue);
			systemSetting.setAutoOffTime((int)autoOffTimeValue);
			systemSetting.setQValue((int)qValue);
			systemSetting.setAlgorithm((int)algorithmValue);
			systemSetting.setMaxQ((int)maxQValue);
			systemSetting.setMinQ((int)minQValue);
			systemSetting.setSleepTime((int)sleepTimeValue);
			systemSetting.setMaskTypeValue((int)maskTypeValue);
			UIAlertView alert = new UIAlertView("Success", "Saved successfully", new MyAlertViewDelegate(this), "OK", null);
            alert.Show();
		}
        partial void defaultBtnTapped(NSObject sender)
        {
            ResultCode res = mReader.DefaultParameter;
            if (res != ResultCode.NoError)
            {
				UIAlertView aler = new UIAlertView("Fail", "Set to default failed", new MyAlertViewDelegate(this), "OK", null);
				aler.Show();
                return;
            }
            if (isJapan)
            {
                foreach (LbtItem lbtItem in lbtItemData)
                {
                    lbtItem.MIsUsed = true;
                }
                mReader.SetLBT(lbtItemData.ToArray());
            }
            buzzerValue = mReader.Buzzer;
            vibratorValue = mReader.Vibrator;
            inventoryTimeValue = mReader.InventoryTime;
            idleTimeValue = mReader.IdleTime;
            autoOffTimeValue = mReader.AutoOffTime;
            qValue = mReader.QValue;
            maxQValue = mReader.MaxQ;
            minQValue = mReader.MinQ;
            sleepTimeValue = mReader.SleepTime;
            algorithmValue = mReader.Algorithm;
            linkProfileValue = mReader.LinkProfileValue;
            defaultLinkProfileValue = mReader.DefaultLinkProfileValue;
            maskTypeValue = MaskType.NoMask;
            mReader.MaskTypeValue = (int)MaskType.NoMask;

			systemSetting.setBuzzer((int)buzzerValue);
			systemSetting.setVibrator((int)vibratorValue);
			systemSetting.setInventoryTime((int)inventoryTimeValue);
			systemSetting.setIdleTime((int)idleTimeValue);
			systemSetting.setAutoOffTime((int)autoOffTimeValue);
			systemSetting.setQValue((int)qValue);
			systemSetting.setAlgorithm((int)algorithmValue);
			systemSetting.setMaxQ((int)maxQValue);
			systemSetting.setMinQ((int)minQValue);
			systemSetting.setSleepTime((int)sleepTimeValue);
			systemSetting.setMaskTypeValue((int)maskTypeValue);
			systemSetting.setLinkProfileValue((int)linkProfileValue);
			systemSetting.setDefaultLinkProfileValue((int)defaultLinkProfileValue);
            systemSetting.setSessionFlag(mReader.SessionFlag);
            systemSetting.setInventorySession((int)mReader.InventorySession);
            systemSetting.setOperationTime(mReader.OperationTime);
			systemSetting.setPowerGain(300);

            UserData.setBatteryInterval("10000");
            initViewData();
			UIAlertView alert = new UIAlertView("Success", "Set to default successfully", new MyAlertViewDelegate(this), "OK", null);
			alert.Show();
		}
        partial void pickerCloseBtnTapped(NSObject sender)
        {
            hidePickerView();
        }
        partial void qValuePickerOkBtnTapped(NSObject sender)
        {
            nint idx = pickerView.SelectedRowInComponent(0);
            if (pickerView.Tag == PICKER_VIEW_MaxQValue)
            {
                setMaxQ(idx);
			}
			else if (pickerView.Tag == PICKER_VIEW_MinQValue)
			{
                setMinQ(idx);
			}
			else if (pickerView.Tag == PICKER_VIEW_QValue)
			{
                setQ(idx);
			}
            hidePickerView();
        }
        partial void algorithmPickerOkBtnTapped(NSObject sender)
        {
			nint idx = pickerView.SelectedRowInComponent(0);
            setAlgorithm(idx);
            hidePickerView();
		}
        partial void linkProfilePickerOkBtnTapped(NSObject sender)
        {
			nint idx = pickerView.SelectedRowInComponent(0);
			if (pickerView.Tag == PICKER_VIEW_Link_Profile)
			{
				setLinkProfile(idx);
                mReader.LinkProfileValue = linkProfileValue;
                systemSetting.setLinkProfileValue(linkProfileValue);
			}
			else if (pickerView.Tag == PICKER_VIEW_Default_Link_Profile)
			{
				setDefaultLinkProfile(idx);
                mReader.DefaultLinkProfileValue = defaultLinkProfileValue;
				systemSetting.setDefaultLinkProfileValue(defaultLinkProfileValue);
			}

			hidePickerView();
        }
        partial void buzzerPickerOkBtnTapped(NSObject sender)
        {
			nint idx = pickerView.SelectedRowInComponent(0);
			setBuzzer(idx);
			hidePickerView();
        }
        partial void vibratorPickerOkBtnTapped(NSObject sender)
        {
			nint idx = pickerView.SelectedRowInComponent(0);
			setVibrator(idx);
			hidePickerView();
        }
        partial void keyActionPickerOkBtnTapped(NSObject sender)
        {
			nint idx = pickerView.SelectedRowInComponent(0);
			setKeyAction(idx);
			hidePickerView();
        }
        partial void maskTypePickerOkBtnTapped(NSObject sender)
        {
			nint idx = pickerView.SelectedRowInComponent(0);
			setMaskType(idx);
			hidePickerView();
        }
        partial void lbtChannelBtnTapped(NSObject sender)
        {
            tableView.ReloadData();
            lbtChannelTableTopView.Hidden = false;
            tableView.Hidden = false;
            shadowView.Hidden = false;
        }
        partial void tableCloseBtnTapped(NSObject sender)
        {
            hideTableView();
        }
        partial void lbtChannelTableOkBtnTapped(NSObject sender)
        {
            hideTableView();
            mReader.SetLBT(lbtItemData.ToArray());
        }
        #pragma mark - Custom
        void showPickerView()
        {
            pickerView.Hidden = false;
            shadowView.Hidden = false;
        }
		void hidePickerView()
        {
            LinkProfileTableTopView.Hidden = true;
            algorithmPickerTopView.Hidden = true;
            qValuePickerTopView.Hidden = true;
            vibratorPickerTopView.Hidden = true;
            buzzerPickerTopView.Hidden = true;
            keyActionPickerTopView.Hidden = true;
            maskTypePickerTopView.Hidden = true;
            pickerView.Hidden = true;
            shadowView.Hidden = true;
        }
        void hideTableView()
        {
            lbtChannelTableTopView.Hidden = true;
            tableView.Hidden = true;
			shadowView.Hidden = true;
		}
        void setBuzzer(nint index)
        {
            buzzerTextField.Text = buzzerPickerData[index];
            buzzerValue = (BuzzerState)(uint)index;
        }
		void setVibrator(nint index)
		{
			vibratorTextField.Text = vibratorPickerData[index];
			vibratorValue = (VibratorState)(uint)index;
		}
		void setMinQ(nint index)
		{
            if (index > maxQValue)
            {
                index = maxQValue;
            }
			minQValueTextField.Text = qValuePickerData[index];
            minQValue = (int)index;
		}
		void setMaxQ(nint index)
		{
			if (index < minQValue)
			{
				index = minQValue;
			}
			maxQValueTextField.Text = qValuePickerData[index];
            maxQValue = (int)index;
		}
		void setLinkProfile(nint index)
		{
			linkProfileTextField.Text = linkProfilePickerData[index];
            linkProfileValue = (int)index;
		}
		void setDefaultLinkProfile(nint index)
		{
			defaultLinkProfileTextField.Text = linkProfilePickerData[index];
			defaultLinkProfileValue = (int)index;
		}
		void setQ(nint index)
		{
			qValueTextField.Text = qValuePickerData[index];
            qValue = (int)index;
		}
		void setAlgorithm(nint index)
		{
			algorithmTextField.Text = algorithmPickerData[index];
			algorithmValue = (AlgorithmType)(uint)index;
		}
        void setInventoryTime(string inventoryTime)
		{
			inventoryTimeTextField.Text = inventoryTime;
            inventoryTimeValue = int.Parse(inventoryTime);
		}
		void setIdleTime(string idleTime)
		{
			idleTimeTextField.Text = idleTime;
			idleTimeValue = int.Parse(idleTime);
		}
		void setAutoOffTime(string autoOffTime)
		{
			autoOffTimeTextField.Text = autoOffTime;
			autoOffTimeValue = int.Parse(autoOffTime);
		}
		void setKeyAction(nint index)
		{
			keyActionTextField.Text = keyActionPickerData[index];
			keyActionValue = (int)index;
		}

		void setBatteryInterval(string batteryInterval)
		{
			batteryIntervalTextField.Text = batteryInterval;
			batteryIntervalValue = batteryInterval;
		}
		void setSleepTime(string sleepTime)
		{
			sleepTimeTextField.Text = sleepTime;
            sleepTimeValue = int.Parse(sleepTime);
		}
		void setMaskType(nint index)
		{
			maskTypeTextField.Text = maskTypePickerData[index];
			maskTypeValue = (MaskType)(uint)index;
		}

        void initViewData()
        {
            setMaxQ(maxQValue);
			setMinQ(minQValue);
            setMaskType((nint)(uint)maskTypeValue);
			setLinkProfile(linkProfileValue);
			setDefaultLinkProfile(defaultLinkProfileValue);
            linkProfileTextField.Text = linkProfileValue.ToString();
			setAlgorithm((nint)(uint)algorithmValue);
			setQ(qValue);
			setBuzzer((nint)(uint)buzzerValue);
			setVibrator((nint)(uint)vibratorValue);
            setInventoryTime(inventoryTimeValue.ToString());
            setIdleTime(idleTimeValue.ToString());
            setAutoOffTime(autoOffTimeValue.ToString());
            setSleepTime(sleepTimeValue.ToString());
            setBatteryInterval(UserData.getBatteryInterval());
		}

		class MyTableViewDelegate : UITableViewDelegate
		{
            OptionsViewController currentViewContorller;
			public MyTableViewDelegate(OptionsViewController controller)
			{
				currentViewContorller = controller;
			}

            public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
            {
                UITableViewCell cell = tableView.CellAt(indexPath);
				LbtItem lbtItem = (LbtItem)currentViewContorller.lbtItemData[indexPath.Row];
                if (cell.Accessory == UITableViewCellAccessory.Checkmark)
                {
                    cell.Accessory = UITableViewCellAccessory.None;
                    lbtItem.MIsUsed = false;
                }
                else
                {
                    cell.Accessory = UITableViewCellAccessory.Checkmark;
                    lbtItem.MIsUsed = true;
				}
			}
            public override void RowDeselected(UITableView tableView, NSIndexPath indexPath)
            {
				UITableViewCell cell = tableView.CellAt(indexPath);
				LbtItem lbtItem = (LbtItem)currentViewContorller.lbtItemData[indexPath.Row];
				if (cell.Accessory == UITableViewCellAccessory.Checkmark)
				{
					cell.Accessory = UITableViewCellAccessory.None;
					lbtItem.MIsUsed = false;
				}
				else
				{
					cell.Accessory = UITableViewCellAccessory.Checkmark;
					lbtItem.MIsUsed = true;
				}
            }
		}

		class MyTableViewSource : UITableViewDataSource
		{
			OptionsViewController currentViewContorller;
			public MyTableViewSource(OptionsViewController controller)
			{
				currentViewContorller = controller;
			}

			public override nint NumberOfSections(UITableView tableView)
			{
				return 1;
			}

			public override nint RowsInSection(UITableView tableView, nint section)
			{
                if (currentViewContorller.lbtItemData != null) return currentViewContorller.lbtItemData.Count;
                return 0;
			}

			public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
			{
				UITableViewCell cell = tableView.DequeueReusableCell("LbtCell", indexPath);
                LbtItem lbtItem = (LbtItem)currentViewContorller.lbtItemData[indexPath.Row];
                if (lbtItem.MIsUsed)
				{
                    cell.Accessory = UITableViewCellAccessory.Checkmark;
				}
                else
                {
                    cell.Accessory = UITableViewCellAccessory.None;
                }
                cell.TextLabel.Text = lbtItem.Frequency;
				return cell;
			}

		}
		class MyPickerViewDataSource : UIPickerViewDataSource
		{
			OptionsViewController currentViewContorller;
			public MyPickerViewDataSource(OptionsViewController controller)
			{
				currentViewContorller = controller;
			}

			public override nint GetComponentCount(UIPickerView pickerView)
			{
				return 1;
			}

			public override nint GetRowsInComponent(UIPickerView pickerView, nint component)
			{
				//throw new NotImplementedException();
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_BUZZER)
				{
                    return currentViewContorller.buzzerPickerData.Length;
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_KEY_ACTION)
				{
                    return currentViewContorller.keyActionPickerData.Length;
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_MASK_TYPE)
				{
                    return currentViewContorller.maskTypePickerData.Length;
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_Vibrator)
				{
                    return currentViewContorller.vibratorPickerData.Length;
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_QValue)
				{
                    return currentViewContorller.qValuePickerData.Length;
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_Algorithm)
				{
                    return currentViewContorller.algorithmPickerData.Length;
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_MinQValue)
				{
                    return currentViewContorller.qValuePickerData.Length;
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_MaxQValue)
				{
                    return currentViewContorller.qValuePickerData.Length;
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_Default_Link_Profile)
				{
                    return currentViewContorller.linkProfilePickerData.Length;
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_Link_Profile)
				{
                    return currentViewContorller.linkProfilePickerData.Length;
				}
				return 0;
			}
		}
		private class MyPickerViewDelegate : UIPickerViewDelegate
		{
			OptionsViewController currentViewContorller;
			public MyPickerViewDelegate(OptionsViewController controller)
			{
				currentViewContorller = controller;
			}

			public override string GetTitle(UIPickerView pickerView, nint row, nint component)
			{
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_BUZZER)
				{
                    return currentViewContorller.buzzerPickerData[row];
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_KEY_ACTION)
				{
					return currentViewContorller.keyActionPickerData[row];
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_MASK_TYPE)
				{
					return currentViewContorller.maskTypePickerData[row];
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_Vibrator)
				{
					return currentViewContorller.vibratorPickerData[row];
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_QValue)
				{
					return currentViewContorller.qValuePickerData[row];
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_Algorithm)
				{
					return currentViewContorller.algorithmPickerData[row];
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_MinQValue)
				{
					return currentViewContorller.qValuePickerData[row];
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_MaxQValue)
				{
					return currentViewContorller.qValuePickerData[row];
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_Default_Link_Profile)
				{
					return currentViewContorller.linkProfilePickerData[row];
				}
				if (pickerView.Tag == currentViewContorller.PICKER_VIEW_Link_Profile)
				{
					return currentViewContorller.linkProfilePickerData[row];
				}
				return "None";
			}
		}
        #pragma mark - UIAlertViewDelegate
		class MyAlertViewDelegate : UIAlertViewDelegate
		{
			OptionsViewController currentViewContorller;
			public MyAlertViewDelegate(OptionsViewController controller)
			{
				currentViewContorller = controller;
			}

			public override void Clicked(UIAlertView alertview, nint buttonIndex)
			{
                if (buttonIndex == 1)
                {
                    UITextField textfield = alertview.GetTextField(0);
                    if (textfield != null)
                    {
                        string str = alertview.GetTextField(0).Text;
                        if (str == "") str = "0";
                        if (alertview.Tag == currentViewContorller.ALERT_VIEW_INTERVAL_TIME)
                        {
                            currentViewContorller.setInventoryTime(str);
                        }
                        else if (alertview.Tag == currentViewContorller.ALERT_VIEW_IDLE_TIME)
                        {
                            currentViewContorller.setIdleTime(str);
                        }
                        else if (alertview.Tag == currentViewContorller.ALERT_VIEW_AUTO_OFF_TIME)
                        {
                            currentViewContorller.setAutoOffTime(str);
                        }
                        else if (alertview.Tag == currentViewContorller.ALERT_VIEW_BATTERY_INTERVAL)
                        {
                            currentViewContorller.setBatteryInterval(str);
                        }
                        else if (alertview.Tag == currentViewContorller.ALERT_VIEW_SLEEP_TIME)
                        {
                            currentViewContorller.setSleepTime(str);
                        }
                    }
					
                }

			}
		}
	}
}
