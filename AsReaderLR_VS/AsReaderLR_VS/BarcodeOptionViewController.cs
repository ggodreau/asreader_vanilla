// This file has been autogenerated from a class added in the UI designer.

using System;
using AsReaderGunSDK;
using Foundation;
using UIKit;

namespace AsReaderLR_VS
{
	public partial class BarcodeOptionViewController : UIViewController
	{
        AppDelegate appDelegate;
        SystemSetting systemSetting;
        NSArray barcodeParamData = new NSArray();

        AsReaderGUNManager gunManager = AsReaderGUNManager.sharedAsReaderGUNManager();

        AsReader mReader
        {
            get => gunManager.getCurrentAsReader();
        }

		public BarcodeOptionViewController (IntPtr handle) : base (handle)
		{
		}
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            AppDelegate.showGlobalProgressHUDWithTitle("Loading...");
            systemSetting = SystemSetting.sharedSystemSetting();
            appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
            tableView.DataSource = new MyTableViewSource(this);
            tableView.Delegate = new MyTableViewDelegate(this);

            if (mReader == null) return;

            if (!mReader.IsRFIDModule)
            {
                UIBarButtonItem rightItem = new UIBarButtonItem("Setting",UIBarButtonItemStyle.Done,this,new ObjCRuntime.Selector("setting"));
                NavigationItem.SetRightBarButtonItem(rightItem, false);
            }
        }
        [Export("setting")]
        void setting()
        {
            BarcodeOption_VC barcodeViewController = (BarcodeOption_VC)Storyboard.InstantiateViewController("BarcodeOption_VC");
            NavigationController.PushViewController(barcodeViewController,true);
        }
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            gunManager.onAsReaderGUNDisconnected = () => {
                AppDelegate.dismissGlobalHUD();
                NavigationController.PopToRootViewController(true);
            };
            gunManager.onAsReaderLeftModeKeyEvent = (status) => OnAsReaderLeftModeKeyEvent(status);
            gunManager.onAsReaderRightModeKeyEvent = (status) => OnAsReaderRightModeKeyEvent(status);
            gunManager.updateDeviceState = (error) => UpdateDeviceState(error);

            mReader.SetScanMode(ScanMode.BarcodeScanMode);
        }
        bool OnAsReaderLeftModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }

        bool OnAsReaderRightModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }
        void UpdateDeviceState(ResultCode error)
        {
            if (error != ResultCode.NoError)
            {
                AppDelegate.dismissGlobalHUD();
                UIAlertView alert = new UIAlertView("Error", "Failed to get response. Try again.", null, "OK", null);
                alert.Show();
                NavigationController.PopViewController(true);
            }
        }
        public override void ViewDidAppear(bool animated)
        {
            mReader.SetPropBarcodeMode(true);
            NSNumber[] numbers = { NSNumber.FromNInt((int)ParamName.Upca),
                                NSNumber.FromNInt((int)ParamName.Upce0),
                                NSNumber.FromNInt((int)ParamName.Upce1),
                                NSNumber.FromNInt((int)ParamName.Ean8),
                                NSNumber.FromNInt((int)ParamName.Ean13),
                                NSNumber.FromNInt((int)ParamName.Code128),
                                NSNumber.FromNInt((int)ParamName.Code39),
                                NSNumber.FromNInt((int)ParamName.Code39Pharmaceutical),
                                NSNumber.FromNInt((int)ParamName.Code93),
                                NSNumber.FromNInt((int)ParamName.Code11),
                                NSNumber.FromNInt((int)ParamName.I2of5),
                                NSNumber.FromNInt((int)ParamName.Codabar),
                                NSNumber.FromNInt((int)ParamName.Msi),
                                NSNumber.FromNInt((int)ParamName.X2of5),
                                NSNumber.FromNInt((int)ParamName.Pdf417),
                                NSNumber.FromNInt((int)ParamName.MacroPDF417),
                                NSNumber.FromNInt((int)ParamName.MicroPDF),
                                NSNumber.FromNInt((int)ParamName.Matrix),
                                NSNumber.FromNInt((int)ParamName.MaxiCode),
                                NSNumber.FromNInt((int)ParamName.QRCode),
                                NSNumber.FromNInt((int)ParamName.AztecCode),
                                NSNumber.FromNInt((int)ParamName.NEC2of5),
                                NSNumber.FromNInt((int)ParamName.R2of5),
                                NSNumber.FromNInt((int)ParamName.A2of5),
                                NSNumber.FromNInt((int)ParamName.Gs1128),
                                NSNumber.FromNInt((int)ParamName.Telepen),
                                NSNumber.FromNInt((int)ParamName.Rss14),  
                                NSNumber.FromNInt((int)ParamName.RSSLimit),
                                NSNumber.FromNInt((int)ParamName.RSSExp),
                                NSNumber.FromNInt((int)ParamName.TriopticCode),
                                NSNumber.FromNInt((int)ParamName.CodablockA),
                                NSNumber.FromNInt((int)ParamName.CodablockF),
                                NSNumber.FromNInt((int)ParamName.ComCode),
                                NSNumber.FromNInt((int)ParamName.Tlc39),
                                NSNumber.FromNInt((int)ParamName.ChinaPost),
                                NSNumber.FromNInt((int)ParamName.KoreaPost),
                                NSNumber.FromNInt((int)ParamName.HanXinCode)};
            NSMutableArray arrParam = new NSMutableArray();
            foreach(NSNumber paramName in numbers)
            {
                AsParamValue val = mReader.GetBarcodeParam(paramName);
                if (val != null) arrParam.Add(val);
            }
            barcodeParamData = systemSetting.getBarcodeParamData();
            if(barcodeParamData.Count == 0)
            {
                barcodeParamData = arrParam;
            }
            tableView.ReloadData();
            AppDelegate.dismissGlobalHUD();
        }
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            gunManager.init();
            if (mReader != null){
                mReader.SetScanMode(ScanMode.RFIDScanMode);
                mReader.SetBarcodeMode(false, false);
            }
        }
        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
        }

        partial void defaultAllSymBtnTapped(NSObject sender)
        {
                for (int i = 0; i < (int)barcodeParamData.Count; i++)
                {
                    AsParamValue paramValue = barcodeParamData.GetItem<AsParamValue>((nuint)i);
                    switch (paramValue.ParamName)
                    {
                        case ParamName.Upca:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Upce0:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Upce1:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.Ean8:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Ean13:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Code128:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Code39:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Code39Pharmaceutical:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.Code93:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Code11:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.I2of5:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Codabar:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Msi:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.X2of5:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.Pdf417:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.MacroPDF417:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.MicroPDF:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.Matrix:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.MaxiCode:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.QRCode:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.AztecCode:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.NEC2of5:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.R2of5:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.A2of5:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.Gs1128:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Telepen:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.Rss14:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.RSSLimit:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.RSSExp:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.TriopticCode:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.CodablockA:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.CodablockF:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.ComCode:
                            paramValue.SetEnabled(true);
                            break;
                        case ParamName.Tlc39:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.ChinaPost:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.KoreaPost:
                            paramValue.SetEnabled(false);
                            break;
                        case ParamName.HanXinCode:
                            paramValue.SetEnabled(false);
                            break;
                        default:
                            break;
                    }
                }
            tableView.ReloadData();
        }
        partial void disableAllSymBtnTapped(NSObject sender)
        {
            for (int i = 0; i < (int)barcodeParamData.Count; i ++)
            {
                AsParamValue paramValue = barcodeParamData.GetItem<AsParamValue>((nuint)i);
                paramValue.SetEnabled(false);
            }
            tableView.ReloadData();
        }
        partial void enableAllSymBtnTapped(NSObject sender)
        {
            for (int i = 0; i < (int)barcodeParamData.Count; i++)
            {
                AsParamValue paramValue = barcodeParamData.GetItem<AsParamValue>((nuint)i);
                paramValue.SetEnabled(true);
            }
            tableView.ReloadData();
        }
        partial void saveSymBtnTapped(NSObject sender)
        {
            ResultCode res = ResultCode.NoError;
            AppDelegate.showGlobalProgressHUDWithTitle("Saving...");
            for (int i = 0; i < (int)barcodeParamData.Count; i++)
            {
                AsParamValue paramValue = barcodeParamData.GetItem<AsParamValue>((nuint)i);
                res = mReader.SetBarcodeParam(paramValue);
                if (res != ResultCode.NoError)
                {
                    AppDelegate.dismissGlobalHUD();
                    return;
                }
            }
            AppDelegate.dismissGlobalHUD();
            if (res == ResultCode.NoError)
            {
                UIAlertView alert = new UIAlertView("Success", "Saved successfully", null, "OK", null);
                alert.Show();
            }
            else
            {
                UIAlertView alert = new UIAlertView("Error", "Failed to save", null, "OK", null);
                alert.Show();
            }
            systemSetting.setBarcodeParamData(barcodeParamData);

        }
        private class MyTableViewDelegate : UITableViewDelegate
        {
            BarcodeOptionViewController currentViewContorller;
            public MyTableViewDelegate(BarcodeOptionViewController controller)
            {
                currentViewContorller = controller;
            }

            public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
            {
                UITableViewCell cell = tableView.CellAt(indexPath);
                AsParamValue paramValue = currentViewContorller.barcodeParamData.GetItem<AsParamValue>((nuint)indexPath.Row);
                if (cell.Accessory == UITableViewCellAccessory.Checkmark){
                    cell.Accessory = UITableViewCellAccessory.None;
                    paramValue.Value = 0;
                }
                else
                {
                    cell.Accessory = UITableViewCellAccessory.Checkmark;
                    paramValue.Value = 1;
                }
            }
        }

        private class MyTableViewSource : UITableViewDataSource
        {
            BarcodeOptionViewController currentViewContorller;
            public MyTableViewSource(BarcodeOptionViewController controller)
            {
                currentViewContorller = controller;
            }

            public override nint NumberOfSections(UITableView tableView)
            {
                return 1;
            }

            public override nint RowsInSection(UITableView tableView, nint section)
            {
                return (nint)currentViewContorller.barcodeParamData.Count;
            }

            public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
            {
                UITableViewCell cell = tableView.DequeueReusableCell("BarcodeCell", indexPath);
                AsParamValue paramValue = currentViewContorller.barcodeParamData.GetItem<AsParamValue>((nuint)indexPath.Row);
                if (paramValue != null && cell != null)
                {
                    cell.TextLabel.Text = AsParamName.GetName(paramValue.ParamName);
                    if(paramValue.Value != 0)
                    {
                        cell.Accessory = UITableViewCellAccessory.Checkmark;
                    }
                    else
                    {
                        cell.Accessory = UITableViewCellAccessory.None;
                    }
                }

                return cell;
            }

        }
	}
}
