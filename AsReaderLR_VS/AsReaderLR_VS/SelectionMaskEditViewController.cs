// This file has been autogenerated from a class added in the UI designer.

using System;
using AsReaderGunSDK;
using Foundation;
using UIKit;
using System.Collections.Generic;

namespace AsReaderLR_VS
{
	public partial class SelectionMaskEditViewController : UIViewController
	{
        public AsSelectMaskParam selectMaskParam;

        AppDelegate appDelegate;
        List<string> pickerData = new List<string>();

        int PICKER_VIEW_TARGET = 0;
        int PICKER_VIEW_ACTION = 1;
        int PICKER_VIEW_BANK = 2;
        int PICKER_VIEW_OFFSET = 3;
        int PICKER_VIEW_LENGTH = 4;

        int ALERT_VIEW_MASK = 0;

        AsReaderGUNManager gunManager = AsReaderGUNManager.sharedAsReaderGUNManager();

		public SelectionMaskEditViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
            pickerView.DataSource = new MyPickerViewDataSource(this);
            pickerView.Delegate = new MyPickerViewDelegate(this);
            for (int i = 0; i < appDelegate.DATA_BIT.Length; i++)
            {
                string offset = appDelegate.DATA_BIT[i];
                pickerData.Add(offset + " bit");
            }
            if (selectMaskParam != null)
            {
                setTarget((int)selectMaskParam.Target);
                setAction((int)selectMaskParam.Action);
                setBank((int)selectMaskParam.Bank);
                int Offset = Array.IndexOf(appDelegate.DATA_BIT, selectMaskParam.Offset.ToString());
                setOffset(Offset);
                setMask(selectMaskParam.Mask);
                int Length = Array.IndexOf(appDelegate.DATA_BIT, selectMaskParam.Length.ToString());
                setLength(Length);
            }
            else
            {
                selectMaskParam = new AsSelectMaskParam();
                setTarget((int)MaskTargetType.L);
                setAction((int)MaskActionType.Ab);
                setBank((int)MemoryBank.Epc);
                setOffset(1);
                setLength(1);
            }    
        }
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            gunManager.onAsReaderGUNDisconnected = () => {
                NavigationController.PopToRootViewController(true);
            };
        }
        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
        }
        #pragma mark - IBAction
        partial void targetBtnTapped(NSObject sender)
        {
            pickerView.Tag = PICKER_VIEW_TARGET;
            pickerView.ReloadAllComponents();
            if (targetTextField.Text != "")
            {
                int index = Array.IndexOf(appDelegate.DATA_TARGET, targetTextField.Text);
                pickerView.Select((nint)index, 0, false);
            }
            else
            {
                pickerView.Select(0, 0, false);
            }
            pickerView.Hidden = false;
            targetPickerTopView.Hidden = false;
        }

        partial void actionBtnTapped(NSObject sender)
        {
            pickerView.Tag = PICKER_VIEW_ACTION;
            pickerView.ReloadAllComponents();
            if (actionTextField.Text != "")
            {
                int index = Array.IndexOf(appDelegate.DATA_ACTION, actionTextField.Text);
                pickerView.Select((nint)index, 0, false);
            }
            else
            {
                pickerView.Select(0, 0, false);
            }
            pickerView.Hidden = false;
            actionPickerTopView.Hidden = false;
        }
        partial void bankBtnTapped(NSObject sender)
        {
            pickerView.Tag = PICKER_VIEW_BANK;
            pickerView.ReloadAllComponents();
            if (bankTextField.Text != "")
            {
                int index = Array.IndexOf(appDelegate.DATA_BANK, bankTextField.Text);
                pickerView.Select((nint)index, 0, false);
            }
            else
            {
                pickerView.Select(0, 0, false);
            }
            pickerView.Hidden = false;
            bankPickerTopView.Hidden = false;
        }
        partial void offsetBtnTapped(NSObject sender)
        {
            pickerView.Tag = PICKER_VIEW_OFFSET;
            pickerView.ReloadAllComponents();
            if (offsetTextField.Text != "")
            {
                int index = pickerData.IndexOf(offsetTextField.Text);;
                pickerView.Select((nint)index, 0, false);
            }
            else
            {
                pickerView.Select(0, 0, false);
            }
            pickerView.Hidden = false;
            offsetPickerTopView.Hidden = false;
        }
        partial void lengthBtnTapped(NSObject sender)
        {
            pickerView.Tag = PICKER_VIEW_LENGTH;
            pickerView.ReloadAllComponents();
            if (lengthTextField.Text != "")
            {
                int index = pickerData.IndexOf(lengthTextField.Text);
                pickerView.Select((nint)index, 0, false);
            }
            else
            {
                pickerView.Select(0, 0, false);
            }
            pickerView.Hidden = false;
            lengthPickerTopView.Hidden = false;
        }
        partial void maskBtnTapped(NSObject sender)
        {
            MyAlertViewDelegate alertViewDelegate = new MyAlertViewDelegate(this);
            UIAlertView alert = new UIAlertView("Mask:", "Please enter mask value.", alertViewDelegate, "Cancel", null);
            alert.AlertViewStyle = UIAlertViewStyle.PlainTextInput;
            alert.GetTextField(0).KeyboardType = UIKeyboardType.ASCIICapable;
            alert.GetTextField(0).Delegate = new MyTextFieldDelegate(this);
            alert.Tag = ALERT_VIEW_MASK;
            alert.AddButton("OK");
            alert.Show();
        }
        partial void pickerCloseBtnTapped(NSObject sender)
        {
            hidePickerView();
        }
        partial void targetPickerOkBtnTapped(NSObject sender)
        {
            long idx = pickerView.SelectedRowInComponent(0);
            setTarget((int)idx);
            hidePickerView();
        }
        partial void actionPickerOkBtnTapped(NSObject sender)
        {
            long idx = pickerView.SelectedRowInComponent(0);
            setAction((int)idx);
            hidePickerView();
        }
        partial void bankPickerOkBtnTapped(NSObject sender)
        {
            long idx = pickerView.SelectedRowInComponent(0);
            setBank((int)idx);
            hidePickerView();
        }
        partial void offsetPickerOkBtnTapped(NSObject sender)
        {
            long idx = pickerView.SelectedRowInComponent(0);
            setOffset((int)idx);
            hidePickerView();
        }
        partial void lengthPickerOkBtnTapped(NSObject sender)
        {
            long idx = pickerView.SelectedRowInComponent(0);
            setLength((int)idx);
            hidePickerView();
        }
        #pragma mark - Custom
        void hidePickerView()
        {
            targetPickerTopView.Hidden = true;
            actionPickerTopView.Hidden = true;
            bankPickerTopView.Hidden = true;
            offsetPickerTopView.Hidden = true;
            lengthPickerTopView.Hidden = true;
            pickerView.Hidden = true;
        }
        void setTarget(int index)
        {
            targetTextField.Text = appDelegate.DATA_TARGET[index];
            selectMaskParam.Target = (MaskTargetType)(uint)index;
        }
        void setAction(int index)
        {
            actionTextField.Text = appDelegate.DATA_ACTION[index];
            selectMaskParam.Action = (MaskActionType)(uint)index;
        }
        void setBank(int index)
        {
            bankTextField.Text = appDelegate.DATA_BANK[index];
            selectMaskParam.Bank = (MemoryBank)(uint)index;
        }
        void setOffset(int index)
        {
            offsetTextField.Text = pickerData[index];
            selectMaskParam.Offset = int.Parse(appDelegate.DATA_BIT[index]);
        }
        void setMask(string mask)
        {
            maskTextField.Text = mask;
            selectMaskParam.Mask = mask;
        }
        void setLength(int index)
        {
            lengthTextField.Text = pickerData[index];
            selectMaskParam.Length = int.Parse(appDelegate.DATA_BIT[index]);
        }
        private class MyAsreaderDelegate : AsReaderDelegate
        {
            SelectionMaskEditViewController currentViewContorller;
            public MyAsreaderDelegate(SelectionMaskEditViewController controller)
            {
                currentViewContorller = controller;
            }
            public override bool OnAsReaderTriggerKeyEvent(bool status)
            {
                return false;
            }
        }
#pragma mark - Navigation
        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
        }
        public override bool ShouldPerformSegue(string segueIdentifier, NSObject sender)
        {
            if (segueIdentifier == "BackToSource")
            {
                int index = pickerData.IndexOf(lengthTextField.Text);
                long maskBit = long.Parse(appDelegate.DATA_BIT[index]);
                if (maskTextField.Text.Length != maskBit / 4)
                {
                    UIAlertView alert = new UIAlertView("Error", "Mask length is not valid", null, "OK", null);
                    alert.Show();
                    return false;
                }
            }
            return true;
        }

        #pragma mark - UIPickerViewDelegate
        private class MyPickerViewDelegate : UIPickerViewDelegate
        {
            SelectionMaskEditViewController currentViewContorller;
            public MyPickerViewDelegate(SelectionMaskEditViewController controller)
            {
                currentViewContorller = controller;
            }

            public override string GetTitle(UIPickerView pickerView, nint row, nint component)
            {
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_TARGET)
                {
                    return currentViewContorller.appDelegate.DATA_TARGET[row];
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_ACTION)
                {
                    return currentViewContorller.appDelegate.DATA_ACTION[row];
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_BANK)
                {
                    return currentViewContorller.appDelegate.DATA_BANK[row];
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_OFFSET)
                {
                    return currentViewContorller.pickerData[(int)row];
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_LENGTH)
                {
                    return currentViewContorller.pickerData[(int)row];
                }
                return "None";
            }
        }
        private class MyPickerViewDataSource : UIPickerViewDataSource
        {
            SelectionMaskEditViewController currentViewContorller;
            public MyPickerViewDataSource(SelectionMaskEditViewController controller)
            {
                currentViewContorller = controller;
            }

            public override nint GetComponentCount(UIPickerView pickerView)
            {
                return 1;
            }

            public override nint GetRowsInComponent(UIPickerView pickerView, nint component)
            {
                //throw new NotImplementedException();
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_TARGET)
                {
                    return currentViewContorller.appDelegate.DATA_TARGET.Length;
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_ACTION)
                {
                    return currentViewContorller.appDelegate.DATA_ACTION.Length;
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_BANK)
                {
                    return currentViewContorller.appDelegate.DATA_BANK.Length;
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_OFFSET)
                {
                    return currentViewContorller.appDelegate.DATA_BIT.Length;
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_LENGTH)
                {
                    return currentViewContorller.pickerData.Count;
                }
                return 0;
            }
        }
        #pragma mark - UIAlertViewDelegate
        private class MyAlertViewDelegate : UIAlertViewDelegate
        {
            SelectionMaskEditViewController currentViewContorller;
            public MyAlertViewDelegate(SelectionMaskEditViewController controller)
            {
                currentViewContorller = controller;
            }

            public override void Clicked(UIAlertView alertview, nint buttonIndex)
            {
                if (alertview.Tag == currentViewContorller.ALERT_VIEW_MASK)
                {
                    if (buttonIndex == 1)
                    {
                        currentViewContorller.setMask(alertview.GetTextField(0).Text);
                    }
                }
                else 
                {
                    currentViewContorller.setMask("");
                }
            }
        }
        #pragma mark - UITextViewDelegate
        private class MyTextFieldDelegate : UITextFieldDelegate
        {
            SelectionMaskEditViewController currentViewContorller;
            public MyTextFieldDelegate(SelectionMaskEditViewController controller)
            {
                currentViewContorller = controller;
            }

            public override bool ShouldChangeCharacters(UITextField textField, NSRange range, string replacementString)
            {
                if (range.Length == 1)
                {
                    return true;
                }
                string a = "0123456789ABCDEFabcdef";

                if (a.IndexOf(replacementString) > -1)
                {
                    string str = textField.Text + replacementString;
                    textField.Text = str.ToUpper();
                }
                return false;
            }

        }
	}
}
