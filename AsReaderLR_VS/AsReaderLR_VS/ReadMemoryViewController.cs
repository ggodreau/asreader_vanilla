// This file has been autogenerated from a class added in the UI designer.

using System;
using AsReaderGunSDK;
using Foundation;
using UIKit;
using System.Collections.Generic;

namespace AsReaderLR_VS
{
	public partial class ReadMemoryViewController : UIViewController
	{
        int PICKER_VIEW_BANK = 0;
        int PICKER_VIEW_OFFSET = 1;
        int PICKER_VIEW_LENGTH = 2;
        int PICKER_VIEW_POWER_GAIN = 3;

        int ALERT_VIEW_PASSWORD = 0;
        int ALERT_VIEW_OPERATION_TIME = 1;
        int ALERT_VIEW_READING = 2;

        int ALERT_VIEW_OUTHERVIEW = 30;

        string MSG_TAG_WAIT = "Tag memory to read or erase\nPlease click the button.";

        AppDelegate appDelegate;
        UIAlertView currentAlertView;
        bool isActionResult;
        MaskType maskType;
        SystemSetting systemSetting;

        public string maskValue;
        NSArray _offsetPickerData;
        NSArray _lengthPickerData;
        List<string> powerGainPickerData = new List<string>();
        int offsetValue;
        int lengthValue;

        AsReaderGUNManager gunManager = AsReaderGUNManager.sharedAsReaderGUNManager();

        AsReader mReader
        {
            get => gunManager.getCurrentAsReader();
        }

		public ReadMemoryViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            systemSetting = SystemSetting.sharedSystemSetting();
            appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
            pickerView.DataSource = new MyPickerViewDataSource(this);
            pickerView.Delegate = new MyPickerViewDelegate(this);
            int min = mReader.PowerGainRange.min;
            int max = mReader.PowerGainRange.max;
            for (int i = min; i <= max; i += 10)
            {
                powerGainPickerData.Add((i / 10).ToString() + ".0 dB");
            }
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            gunManager.onAsReaderGUNDisconnected = () => {
                NavigationController.PopToRootViewController(true);
            };
            gunManager.accessResult = (error, action, epc, data, rssi, phase) => AccessResult(error, action, epc, data, rssi, phase);
            gunManager.onAsReaderLeftModeKeyEvent = (status) => OnAsReaderLeftModeKeyEvent(status);
            gunManager.onAsReaderRightModeKeyEvent = (status) => OnAsReaderRightModeKeyEvent(status);
            gunManager.changedActionState = (action, resultCode) => ChangedActionState(action, resultCode);
            gunManager.onAsReaderTriggerKeyEvent = (status) => OnAsReaderTriggerKeyEvent(status);
            gunManager.updateDeviceState = (error) => UpdateDeviceState(error);
        }
        void AccessResult(ResultCode error, CommandType action, string epc, string data, float rssi, float phase)
        {
            isActionResult = true;
            if (error != ResultCode.NoError)
            {
                if (currentAlertView != null)
                {
                    currentAlertView.DismissWithClickedButtonIndex(0, true);
                }
                messageLabel.Text = AsResultCode.Msg(error);
                currentAlertView = new UIAlertView("Error", AsResultCode.Msg(error), null, "OK", null);
                currentAlertView.Tag = ALERT_VIEW_OUTHERVIEW;
                currentAlertView.Show();
                return;
            }
            messageLabel.Text = "Success";
            selectionTagLabel.Text = epc;

            address1Label.Text = offsetValue.ToString() + "WORD";
            address2Label.Text = (offsetValue + 1).ToString() + "WORD";
            address3Label.Text = (offsetValue + 2).ToString() + "WORD";
            address4Label.Text = (offsetValue + 3).ToString() + "WORD";
            address5Label.Text = (offsetValue + 4).ToString() + "WORD";
            address6Label.Text = (offsetValue + 5).ToString() + "WORD";
            address7Label.Text = (offsetValue + 6).ToString() + "WORD";
            address8Label.Text = (offsetValue + 7).ToString() + "WORD";

            string[] bitLabel = data.Split(',');
            int bitLabelCount = bitLabel.Length;
            if (bitLabelCount >= 1)
            {
                value1Label.Text = bitLabel[0];
            }
            else
            {
                value1Label.Text = "0000";
            }
            if (bitLabelCount >= 2)
            {
                value2Label.Text = bitLabel[1];
            }
            else
            {
                value2Label.Text = "0000";
            }
            if (bitLabelCount >= 3)
            {
                value3Label.Text = bitLabel[2];
            }
            else
            {
                value3Label.Text = "0000";
            }
            if (bitLabelCount >= 4)
            {
                value4Label.Text = bitLabel[3];
            }
            else
            {
                value4Label.Text = "0000";
            }
            if (bitLabelCount >= 5)
            {
                value5Label.Text = bitLabel[4];
            }
            else
            {
                value5Label.Text = "0000";
            }
            if (bitLabelCount >= 6)
            {
                value6Label.Text = bitLabel[5];
            }
            else
            {
                value6Label.Text = "0000";
            }
            if (bitLabelCount >= 7)
            {
                value7Label.Text = bitLabel[6];
            }
            else
            {
                value7Label.Text = "0000";
            }
            if (bitLabelCount >= 8)
            {
                value8Label.Text = bitLabel[7];
            }
            else
            {
                value8Label.Text = "0000";
            }

            if (reportRssiSwitch.On == false)
            {
                setReportRssiModeDefault();
            }
            else
            {
                rssiLabel.Text = Math.Round(rssi, 1).ToString() + " dB";
                phaseLabel.Text = Math.Round(phase, 1).ToString() + "Ëš";
            }
            if (currentAlertView != null)
            {
                currentAlertView.DismissWithClickedButtonIndex(0, true);
            }
        }

        bool OnAsReaderLeftModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }

        bool OnAsReaderRightModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }
         void ReaderInitialized(AsReader reader)
        {

        }

        void UpdateDeviceState(ResultCode error)
        {
            if (error != ResultCode.NoError)
            {
                if (currentAlertView != null)
                {
                    currentAlertView.DismissWithClickedButtonIndex(0, true);
                }
                currentAlertView = new UIAlertView("Error", "Failed to get response. Try again.", null, "OK", null);
                currentAlertView.Tag = ALERT_VIEW_OUTHERVIEW;
                currentAlertView.Show();
                NavigationController.PopViewController(true);
            }
        }

        void ChangedActionState(CommandType action, nint resultCode)
        {
            if (action == CommandType.Stop)
            {
                if (currentAlertView != null)
                {
                    currentAlertView.DismissWithClickedButtonIndex(0, true);
                }
                if (isActionResult == false)
                {
                    messageLabel.Text = MSG_TAG_WAIT;
                }
            }
        }
        bool OnAsReaderTriggerKeyEvent(bool status)
        {
            if (status)
            {
                readAction();
            }
            return false;
        }
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            if (mReader == null)
            {
                return;
            }
            int nPower = mReader.PowerGain;
            int operationTime = mReader.OperationTime;
            mReader.ContinuousMode = false;
            bool isReportRSSI = mReader.RssiMode;
            maskType = (MaskType)mReader.MaskTypeValue;
            if (maskValue != null)
            {
                gunManager.initMask(maskValue,MaskType.Selection);
            }

            isActionResult = false;
            setPowerGain(nPower / 10);
            setOperationTime(operationTime.ToString());
            setBank(1);
            setOffset(2);
            setLength(2);
            setReportRssiModeEnabled(isReportRSSI);
            pickerView.ReloadAllComponents();

            if (maskValue != null)
            {
                selectionTagLabel.Text = maskValue;
                maskBtn.Enabled = false;
            }
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            gunManager.init();
            if (maskValue != null)
            {
                gunManager.exitMask();
            }
        }

        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
        }

        #pragma mark - Getters
        NSArray offsetPickerData()
        {
            if (_offsetPickerData == null)
            {
                NSMutableArray tmpArray = new NSMutableArray();
                foreach (string offset in appDelegate.DATA_WORD)
                {
                    string str = offset + " WORD";
                    tmpArray.Add(new NSString(str));
                }
                _offsetPickerData = tmpArray;
            }
            return _offsetPickerData;
        }

        NSArray lengthPickerData()
        {
            if (_lengthPickerData == null)
            {
                NSMutableArray tmpArray = new NSMutableArray();
                foreach (string offset in appDelegate.DATA_WORD)
                {
                    string str = offset + " WORD";
                    tmpArray.Add(new NSString(str));
                }
                _lengthPickerData = tmpArray;
            }
            return _lengthPickerData;
        }

        #pragma mark - IBAction
        partial void bankBtnTapped(NSObject sender)
        {
            pickerView.Tag = PICKER_VIEW_BANK;
            pickerView.ReloadAllComponents();
            if (bankTextField.Text != "")
            {
                int index = Array.IndexOf(appDelegate.DATA_BANK,bankTextField.Text);
                pickerView.Select((nint)index, 0, false);
            }else
            {
                pickerView.Select(0, 0, false);
            }
            pickerView.Hidden = false;
            bankPickerTopView.Hidden = false;
        }
        partial void offsetBtnTapped(NSObject sender)
        {
            pickerView.Tag = PICKER_VIEW_OFFSET;
            pickerView.ReloadAllComponents();
            if (offsetTextField.Text != "")
            {
                pickerView.Select((nint)offsetPickerData().IndexOf(new NSString(offsetTextField.Text)), 0, false);
            }
            else
            {
                pickerView.Select(0, 0, false);
            }
            pickerView.Hidden = false;
            offsetPickerTopView.Hidden = false;
        }
        partial void lengthBtnTapped(NSObject sender)
        {
            pickerView.Tag = PICKER_VIEW_LENGTH;
            pickerView.ReloadAllComponents();
            if (lengthTextField.Text != "")
            {
                pickerView.Select((nint)lengthPickerData().IndexOf(new NSString(lengthTextField.Text)), 0, false);
            }
            else
            {
                pickerView.Select(0, 0, false);
            }
            pickerView.Hidden = false;
            lengthPickerTopView.Hidden = false;
        }
        partial void passwordBtnTapped(NSObject sender)
        {
            MyAlertViewDelegate alertViewDelegate = new MyAlertViewDelegate(this);
            UIAlertView alert = new UIAlertView("Password:", "Please enter password.", alertViewDelegate, "Cancel", null);
            alert.AlertViewStyle = UIAlertViewStyle.PlainTextInput;
            alert.GetTextField(0).KeyboardType = UIKeyboardType.ASCIICapable;
            alert.GetTextField(0).Delegate = new MyTextFieldDelegate(this);
            alert.Tag = ALERT_VIEW_PASSWORD;
            alert.AddButton("OK");
            alert.Show();
        }
        partial void powerGainBtnTapped(NSObject sender)
        {
            pickerView.Tag = PICKER_VIEW_POWER_GAIN;
            pickerView.ReloadAllComponents();
            if (powerGainTextField.Text != "")
            {
                pickerView.Select((nint)powerGainPickerData.IndexOf(new NSString(powerGainTextField.Text)), 0, false);
            }
            else
            {
                pickerView.Select(0, 0, false);
            }
            pickerView.Hidden = false;
            powerGainPickerTopView.Hidden = false;
        }
        partial void operationTimeBtnTapped(NSObject sender)
        {
            MyAlertViewDelegate alertViewDelegate = new MyAlertViewDelegate(this);
            UIAlertView alert = new UIAlertView("Operation Time:", "Please enter operation time.\n(ex: 30 ms)", alertViewDelegate, "Cancel", null);
            alert.AlertViewStyle = UIAlertViewStyle.PlainTextInput;
            alert.GetTextField(0).KeyboardType = UIKeyboardType.NumberPad;
            alert.Tag = ALERT_VIEW_OPERATION_TIME;
            alert.AddButton("OK");
            alert.Show();
        }
        partial void reportRssiSwitchTapped(NSObject sender)
        {
            mReader.RssiMode = reportRssiSwitch.On;
            systemSetting.setRssiMode(reportRssiSwitch.On);
            setReportRssiModeEnabled(reportRssiSwitch.On);
        }
        partial void readBtnTapped(NSObject sender)
        {
            readAction();
        }
        partial void blockEraseBtnTapped(NSObject sender)
        {
            isActionResult = false;
            messageLabel.Text = "Erasing tag memory.\nPlease waitâ€¦";
            if (operationTimeTextField.Text == "") operationTimeTextField.Text = "0";
            mReader.OperationTime = int.Parse(operationTimeTextField.Text);
            systemSetting.setOperationTime(int.Parse(operationTimeTextField.Text));
            int index = Array.IndexOf(appDelegate.DATA_BANK, bankTextField.Text);
            MemoryBank bank = (MemoryBank)(uint)index;
            mReader.BlockErase(bank, offsetValue,lengthValue);
            clearBtnTapped(sender);
        }
        partial void clearBtnTapped(NSObject sender)
        {
            selectionTagLabel.Text = "Result";
            messageLabel.Text = MSG_TAG_WAIT;

            address1Label.Text = @"0 WORD";
            address2Label.Text = @"1 WORD";
            address3Label.Text = @"2 WORD";
            address4Label.Text = @"3 WORD";
            address5Label.Text = @"4 WORD";
            address6Label.Text = @"5 WORD";
            address7Label.Text = @"6 WORD";
            address8Label.Text = @"7 WORD";

            value1Label.Text = @"0000";
            value2Label.Text = @"0000";
            value3Label.Text = @"0000";
            value4Label.Text = @"0000";
            value5Label.Text = @"0000";
            value6Label.Text = @"0000";
            value7Label.Text = @"0000";
            value8Label.Text = @"0000";

            rssiLabel.Text = @"0.0 dB";
            phaseLabel.Text = @"0.0Ëš";
        }
        partial void maskBtnTapped(NSObject sender)
        {
            if (maskType == MaskType.Selection)
            {
                PerformSegue("SelectionMask",this);
            }
            else
            {
                if (currentAlertView != null)
                {
                    currentAlertView.DismissWithClickedButtonIndex(0, true);
                }
                currentAlertView = new UIAlertView("", "Please set the mask type in RFID Options menu before using mask.", new MyAlertViewDelegate(this), "OK", null);
                currentAlertView.Tag = ALERT_VIEW_OUTHERVIEW;
                currentAlertView.Show();
            }
        }
        partial void pickerCloseBtnTapped(NSObject sender)
        {
            hidePickerView();
        }
        partial void bankPickerOkBtnTapped(NSObject sender)
        {
            nint idx = pickerView.SelectedRowInComponent(0);
            setBank(idx);
            hidePickerView();
        }
        partial void offsetPickerOkBtnTapped(NSObject sender)
        {
            nint idx = pickerView.SelectedRowInComponent(0);
            setOffset(idx);
            hidePickerView();
        }
        partial void lengthPickerOkBtnTapped(NSObject sender)
        {
            nint idx = pickerView.SelectedRowInComponent(0);
            setLength(idx);
            hidePickerView();
        }
        partial void powerGainPickerOkBtnTapped(NSObject sender)
        {
            nint idx = pickerView.SelectedRowInComponent(0);
            idx += mReader.PowerGainRange.min / 10;
            setPowerGain(idx);
            mReader.PowerGain = (int)idx * 10;
            systemSetting.setPowerGain((int)idx * 10);
            hidePickerView();
        }
        #pragma mark - Custom
        void hidePickerView()
        {
            bankPickerTopView.Hidden = true;
            offsetPickerTopView.Hidden = true;
            lengthPickerTopView.Hidden = true;
            powerGainPickerTopView.Hidden = true;
            pickerView.Hidden = true;
        }
        void setBank(nint index)
        {
            bankTextField.Text = appDelegate.DATA_BANK[index];
        }
        void setOffset(nint index)
        {
            offsetTextField.Text = offsetPickerData().GetItem<NSString>((uint)index).ToString();
            offsetValue = (int)index;
        }
        void setLength(nint index)
        {
            lengthTextField.Text = lengthPickerData().GetItem<NSString>((uint)index).ToString();
            lengthValue = (int)index;
        }
        void setPassword(string password)
        {
            passwordTextField.Text = password;
        }
        void setPowerGain(nint power)
        {
            NSString value = new NSString(power.ToString() + ".0 dB");
            int index = powerGainPickerData.IndexOf(value);
            if (powerGainPickerData.Count > index)
            {
                powerGainTextField.Text = powerGainPickerData[index];
            }
        }
        void setOperationTime(string operationTime)
        {
            operationTimeTextField.Text = operationTime;
        }
        void readAction()
        {
            isActionResult = false;
            messageLabel.Text = "Reading tag memory.\nPlease waitâ€¦";
            if (operationTimeTextField.Text == "") operationTimeTextField.Text = "0";
            mReader.OperationTime = int.Parse(operationTimeTextField.Text);
            systemSetting.setOperationTime(int.Parse(operationTimeTextField.Text));
            int index = Array.IndexOf(appDelegate.DATA_BANK, bankTextField.Text);
            MemoryBank bank = (MemoryBank)(uint)index;
            mReader.AccessPassword = passwordTextField.Text;
            mReader.ReadMemory(bank, offsetValue, lengthValue);
            currentAlertView = new UIAlertView("Please wait...", "Reading tag memory", new MyAlertViewDelegate(this), "Stop", null);
            currentAlertView.Tag = ALERT_VIEW_READING;
            currentAlertView.Show();
        }
        void stopAction()
        {
            ResultCode code = mReader.Stop;
        }
        void setReportRssiModeEnabled(bool enabled)
        {
            foreach (UILabel elem in reportRssiCollection)
            {
                elem.Enabled = enabled;
            }
            if (enabled == false)
            {
                setReportRssiModeDefault();
            }
            reportRssiSwitch.On = enabled;
        }
        void setReportRssiModeDefault()
        {
            rssiLabel.Text = "0.0 dB";
            phaseLabel.Text = "0.0Ëš";
        }
        #pragma mark - Storyboard Segue
        partial void prepareForUnwind(UIStoryboardSegue segue)
        {

        }
        #pragma mark - UIPickerViewDataSource

        private class MyPickerViewDataSource : UIPickerViewDataSource
        {
            ReadMemoryViewController currentViewContorller;
            public MyPickerViewDataSource(ReadMemoryViewController controller)
            {
                currentViewContorller = controller;
            }

            public override nint GetComponentCount(UIPickerView pickerView)
            {
                //throw new NotImplementedException();
                return 1;
            }

            public override nint GetRowsInComponent(UIPickerView pickerView, nint component)
            {
                //throw new NotImplementedException();
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_BANK)
                {
                    return (nint)currentViewContorller.appDelegate.DATA_BANK.Length;
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_OFFSET)
                {
                    return (nint)currentViewContorller.appDelegate.DATA_BIT.Length;
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_LENGTH)
                {
                    return (nint)currentViewContorller.lengthPickerData().Count;
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_POWER_GAIN)
                {
                    return currentViewContorller.powerGainPickerData.Count;
                }
                return 0;
            }
        }

        private class MyPickerViewDelegate : UIPickerViewDelegate
        {
            ReadMemoryViewController currentViewContorller;
            public MyPickerViewDelegate(ReadMemoryViewController controller)
            {
                currentViewContorller = controller;
            }

            public override string GetTitle(UIPickerView pickerView, nint row, nint component)
            {
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_BANK)
                {
                    return currentViewContorller.appDelegate.DATA_BANK[row];
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_OFFSET)
                {
                    return currentViewContorller.offsetPickerData().GetItem<NSString>((uint)row).ToString();
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_LENGTH)
                {
                    return currentViewContorller.lengthPickerData().GetItem<NSString>((uint)row).ToString();
                }
                else if (pickerView.Tag == currentViewContorller.PICKER_VIEW_POWER_GAIN)
                {
                    return currentViewContorller.powerGainPickerData[(int)row];
                }
                return "None";
            }
        }
        #pragma mark - UITextViewDelegate
        private class MyTextFieldDelegate : UITextFieldDelegate
        {
            ReadMemoryViewController currentViewContorller;
            public MyTextFieldDelegate(ReadMemoryViewController controller)
            {
                currentViewContorller = controller;
            }

            public override bool ShouldChangeCharacters(UITextField textField, NSRange range, string replacementString)
            {
                if (range.Length == 1)
                {
                    return true;
                }
                long textlen = textField.Text.Length + replacementString.Length - range.Length;
                if (textlen > currentViewContorller.appDelegate.MAX_PASSWORD_LENGTH)
                {
                    return false;
                }
                string a = "0123456789ABCDEFabcdef";

                if (a.IndexOf(replacementString) > -1)
                {
                    string str = textField.Text + replacementString;
                    textField.Text = str.ToUpper();
                }
                return false;
            }

        }
        #pragma mark - UIAlertViewDelegate
        private class MyAlertViewDelegate : UIAlertViewDelegate
        {
            ReadMemoryViewController currentViewContorller;
            public MyAlertViewDelegate(ReadMemoryViewController controller)
            {
                currentViewContorller = controller;
            }

            public override void Clicked(UIAlertView alertview, nint buttonIndex)
            {
                if (alertview.Tag == currentViewContorller.ALERT_VIEW_PASSWORD)
                {
                    if (buttonIndex == 1)
                    {
                        currentViewContorller.setPassword(alertview.GetTextField(0).Text);
                    }
                }
                else if (alertview.Tag == currentViewContorller.ALERT_VIEW_OPERATION_TIME)
                {
                    if (buttonIndex == 1)
                    {
                        UITextField textfield = alertview.GetTextField(0);
                        if (textfield != null)
                        {
                            string str = alertview.GetTextField(0).Text;
                            if (str == "") str = "0";
                            currentViewContorller.setOperationTime(str);
                        }

                    }
                }
                else if (alertview.Tag == currentViewContorller.ALERT_VIEW_READING)
                {
                    currentViewContorller.stopAction();
                }
            }
        }
	}
}
