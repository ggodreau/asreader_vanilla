// This file has been autogenerated from a class added in the UI designer.

using System;
using AsReaderGunSDK;
using Foundation;
using UIKit;
using System.Collections.Generic;

namespace AsReaderLR_VS
{
	public partial class InventoryViewController : UIViewController
	{
        int ALERT_VIEW_OPERATION_TIME = 1;

        int PICKER_VIEW_INVENTORY_SESSION = 0;
        int PICKER_VIEW_POWER_GAIN = 1;
        int PICKER_VIEW_SESSION_FLAG = 2;

        List<string> powerGainPickerData = new List<string>();

        bool _isReloadNeeded;
        long currentTagCount;
        MaskType maskType;
        bool isCanScan;
        SystemSetting systemSetting;

        AppDelegate appDelegate;

        Define define = Define.sharedDefine();

        SessionType inventorySession;
        SessionFlag sessionFlag;

        long mTotalTagCount;
        long mTotalTagCounts;
        double mLastTime;
        double mTagSpeed;

        AsReaderGUNManager gunManager = AsReaderGUNManager.sharedAsReaderGUNManager();

        AsReader mReader
        {
            get => gunManager.getCurrentAsReader();
        }

        public InventoryViewController (IntPtr handle) : base (handle)
		{

		}
		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

            tableView.DataSource = new MyTableViewSource(this);
            tableView.Delegate = new MyTableViewDelegate(this);

            pickerView.DataSource = new MyPickerViewDataSource(this);
            pickerView.Delegate = new MyPickerViewDelegate(this);

            powerGainTextField.Delegate = new MyTextFieldDelegate(this); 

            displayPcSwitch.ValueChanged += (sender, e) => displayPcSwitchTapped(sender);
            continuousModeSwitch.ValueChanged += (sender, e) => continuousModeSwitchTapped(sender);
            reportRssiSwitch.ValueChanged += (sender, e) => reportRssiSwitchTapped(sender);

            systemSetting = SystemSetting.sharedSystemSetting();
            _isReloadNeeded = true;

            appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;

            if (mReader == null)
            {
                return;
            }

            mTotalTagCount = 0;
            mTotalTagCounts = 0;

            foreach (AsTagitem item in appDelegate.rfidData)
            {
                mTotalTagCounts = mTotalTagCounts + item.count;
            }

            int min = mReader.PowerGainRange.min;
            int max = mReader.PowerGainRange.max;
            for (int i = min; i <= max; i += 10)
            {
                powerGainPickerData.Add((i / 10).ToString() + ".0 dB");
            }

            mTagSpeed = 0.0;

            currentTagCount = 0;

            speedLabel.Text = "0 tps";
            reportRssiSwitch.On = false;
            isCanScan = true;
		}

        void updateUI()
        {
            tagCountLabel.Text = appDelegate.rfidData.Count.ToString();
            totalTagCountLabel.Text = mTotalTagCounts.ToString();
            speedLabel.Text = String.Format("{0:F}", mTagSpeed.ToString()) + " tps";
            tableView.ReloadData();
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            gunManager.onAsReaderGUNDisconnected = () => {
                AppDelegate.dismissGlobalHUD();
                NavigationController.PopToRootViewController(true);
            };
            gunManager.accessResult = (error, action, epc, data, rssi, phase) => AccessResult(error, action, epc, data, rssi, phase);
            gunManager.onAsReaderLeftModeKeyEvent = (status) => OnAsReaderLeftModeKeyEvent(status);
            gunManager.onAsReaderRightModeKeyEvent = (status) => OnAsReaderRightModeKeyEvent(status);
            gunManager.readTag = (tag, rssi, phase, frequency) => ReadTag(tag, rssi, phase, frequency);
            gunManager.changedActionState = (action, resultCode) => ChangedActionState(action,resultCode);
            gunManager.onAsReaderTriggerKeyEvent = (status) => OnAsReaderTriggerKeyEvent(status);
            if (mReader != null)
            {
                setInventorySession(mReader.InventorySession);
                setSessionFlag(mReader.SessionFlag);
            }
        }
        void AccessResult(ResultCode error, CommandType action, string epc, string data, float rssi, float phase)
        {
            //base.AccessResult(error, action, epc, data, rssi, phase);
            if (error != ResultCode.NoError)
            {
                UIAlertView alert = new UIAlertView("Error", AsResultCode.Msg(error), null, "OK", null);
                alert.Show();
            }
        }

        bool OnAsReaderLeftModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }

        bool OnAsReaderRightModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }

        void ReadTag(string tag, float rssi, float phase, float frequency)
        {
            double time = new NSDate().SecondsSinceReferenceDate;
            double interval = 0.0;

            mTotalTagCount++;
            mTotalTagCounts++;

            if (mLastTime == 0.0)
            {
                mTagSpeed = 0.0;
                mLastTime = time;
            }
            else
            {
                interval = time - mLastTime;
                if (interval != 0.0)
                {
                    mTagSpeed = (mTotalTagCount - currentTagCount) / interval;
                }
            }
            if (reportRssiSwitch.On == false)
            {
                rssi = 0;
                phase = 0;
            }

            AsTagitem item = (AsTagitem)appDelegate.mapTags.ObjectForKey(new NSString(tag));
            if (item != null)
            {
                item.count++;
                item.updateRssi(rssi, phase, frequency);
            }
            else
            {
                item = AsTagitem.itemWith(tag, rssi, phase, frequency);
                appDelegate.rfidData.Add(item);
                appDelegate.mapTags.SetValueForKey(item, new NSString(tag));
            }

            tagCountLabel.Text = appDelegate.rfidData.Count.ToString();
            totalTagCountLabel.Text = mTotalTagCounts.ToString();
            speedLabel.Text = Math.Round(mTagSpeed, 2).ToString() + " tps";
            tableView.ReloadData();
        }

        void ChangedActionState(CommandType action, nint resultCode)
        {
            if (action == CommandType.Stop)
            {
                inventoryBtn.SetTitle("Inventory", UIControlState.Normal);
                mLastTime = 0;
                currentTagCount = mTotalTagCount;
                foreach (UIControl control in toDisableElems)
                {
                    control.Enabled = true;
                }

                csvOutputBtn.Enabled = true;
                tableView.UserInteractionEnabled = true;
                if (resultCode == (uint)ResultCode.NoError)
                {
                    isCanScan = true;
                    CancelPreviousPerformRequest(this, new ObjCRuntime.Selector("changStatus"), null);
                }
                else
                {
                    isCanScan = false;
                    CancelPreviousPerformRequest(this, new ObjCRuntime.Selector("changStatus"), null);
                    PerformSelector(new ObjCRuntime.Selector("changStatus"), null, 1.0, null);
                }
            }
            else
            {
                if (resultCode == (uint)ResultCode.NoError)
                {
                    inventoryBtn.SetTitle("Stop", UIControlState.Normal);
                    foreach (UIControl control in toDisableElems)
                    {
                        control.Enabled = false;
                    }

                    csvOutputBtn.Enabled = false;
                    tableView.UserInteractionEnabled = false;
                }
            }
        }
        bool OnAsReaderTriggerKeyEvent(bool status)
        {
            if (mReader.ScanMode == ScanMode.RFIDScanMode)
            {
                if (status)
                {
                    if (isCanScan)
                    {
                        ResultCode code = mReader.Inventory;
                    }
                }
                else
                {
                    ResultCode code = mReader.Stop;
                }
                return false;
            }
            return true;
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            if (mReader == null)
            {
                return;
            }

            if (_isReloadNeeded == false)
            {
                return;
            }
            _isReloadNeeded = true;

            AppDelegate.showGlobalProgressHUDWithTitle("Loading...");

            maskType = (MaskType)mReader.MaskTypeValue;
            mReader.StoredMode = false;

            mReader.ReportMode = false;

            int nPower = mReader.PowerGain;
            int operationTime = mReader.OperationTime;

            mLastTime = 0;
            setPowerGain(nPower/10);

            mReader.ContinuousMode = systemSetting.getContinuousMode();
            continuousModeSwitch.On = mReader.ContinuousMode;
            mReader.RssiMode = systemSetting.getRssiMode();
            reportRssiSwitch.On = mReader.RssiMode;
            displayPcSwitch.On = systemSetting.getDisPlayPC();
            setOperationTime(operationTime.ToString());
            setInventorySession(mReader.InventorySession);
            setSessionFlag(mReader.SessionFlag);

            pickerView.ReloadAllComponents();
            updateUI();

            AppDelegate.dismissGlobalHUD();
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            gunManager.init();
            if (mReader != null)
            {
                ResultCode code = mReader.StopSync;
                enableControlByActionState();
            }
        }
        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
        }

#pragma mark - IBActions
        partial void powerGainBtnTapped(UIButton sender)
        {
            pickerView.Tag = PICKER_VIEW_POWER_GAIN;
            pickerView.ReloadAllComponents();
            if (powerGainTextField.Text != "")
            {
                NSString str = new NSString(powerGainTextField.Text);
                pickerView.Select((nint)powerGainPickerData.IndexOf(str), 0, false);
            }
            else
            {
                pickerView.Select(0, 0, false);
            }
            pickerView.Hidden = false;
            powerGainPickerTopView.Hidden = false;
        }

        void displayPcSwitchTapped(object sender)
        {
            systemSetting.setDisPlayPC(displayPcSwitch.On);
            tableView.ReloadData();
        }
        void continuousModeSwitchTapped(object sender)
        {
            mReader.ContinuousMode = continuousModeSwitch.On;
            systemSetting.setContinuousMode(continuousModeSwitch.On);
        }
        void reportRssiSwitchTapped(object sender)
        {
            mReader.RssiMode = reportRssiSwitch.On;
            systemSetting.setRssiMode(reportRssiSwitch.On);
            appDelegate.rfidData.RemoveRange(0, appDelegate.rfidData.Count);
            appDelegate.mapTags = new NSMutableDictionary();
            currentTagCount = 0;
            tagCountLabel.Text = "0";
            totalTagCountLabel.Text = "0";
            speedLabel.Text = "0 tps";
            mTagSpeed = 0.0;
            mLastTime = 0;
            mTotalTagCount = 0;
            mTotalTagCounts = 0;
            tableView.ReloadData();
        }
        partial void inventoryBtnTapped(UIButton sender)
        {
            if (mReader.Action == CommandType.Stop)
            {
                ResultCode code = mReader.Inventory;
            }
            else
            {
                ResultCode code = mReader.Stop;
            }
        }

        partial void clearBtnTapped(UIButton sender)
        {
			appDelegate.rfidData.RemoveRange(0, appDelegate.rfidData.Count);
			appDelegate.mapTags = new NSMutableDictionary();
            tagCountLabel.Text = "0";
            totalTagCountLabel.Text = "0";
            speedLabel.Text = "0 tps";
            mTagSpeed = 0.0;
            mLastTime = 0;
            mTotalTagCount = 0;
            currentTagCount = 0;
            mTotalTagCounts = 0;
            tableView.ReloadData();
        }
        partial void maskBtnTapped(UIButton sender)
        {
            if (maskType == MaskType.NoMask)
            {
                UIAlertView alert = new UIAlertView("", "Please set the mask type in RFID Options menu before using mask.", new MyAlertViewDelegate(this), "OK");
                alert.Show();
                return;
            }
            else if (maskType == MaskType.Selection)
            {
                PerformSegue(@"SelectionMask", this);
            }
            else if (maskType == MaskType.Epc)
            {
                PerformSegue("EpcMask", this);
            }
            _isReloadNeeded = false;
        }
        partial void pickerCloseBtnTapped(UIButton sender)
        {
            hidePickerView();
        }
        partial void powerGainPickerOkBtnTapped(UIButton sender)
        {
            if (pickerView.Tag == PICKER_VIEW_POWER_GAIN)
            {
                int idx = (int)pickerView.SelectedRowInComponent(0);
                idx += mReader.PowerGainRange.min / 10;
                setPowerGain(idx);
                mReader.PowerGain = idx * 10;
                systemSetting.setPowerGain(idx * 10);
            }
            else if (pickerView.Tag == PICKER_VIEW_INVENTORY_SESSION)
            {
                setInventorySession((SessionType)(uint)pickerView.SelectedRowInComponent(0));
                mReader.InventorySession = inventorySession;
                systemSetting.setInventorySession((int)inventorySession);
            }
            else if (pickerView.Tag == PICKER_VIEW_SESSION_FLAG)
            {
                setSessionFlag((SessionFlag)(uint)pickerView.SelectedRowInComponent(0));
                mReader.SessionFlag = sessionFlag;
                systemSetting.setSessionFlag(sessionFlag);
            }
            hidePickerView();
        }
        partial void operationTimeBtnTapped(UIButton sender)
        {
            UIAlertView alert = new UIAlertView("Operation Time:", "Please enter operation time.\n(ex: 30 ms)", new MyAlertViewDelegate(this), "Cancel");
            alert.AlertViewStyle = UIAlertViewStyle.PlainTextInput;
            alert.GetTextField(0).KeyboardType = UIKeyboardType.NumberPad;
            alert.Tag = ALERT_VIEW_OPERATION_TIME;
            alert.AddButton("OK");
            alert.Show();
        }
        partial void csvOutputBtnTapped(UIBarButtonItem sender)
        {

        }
        partial void onClickOptionButton(UIButton sender)
        {
            CoreGraphics.CGRect frame = tableView.Frame;
            CoreGraphics.CGRect frameS = scrollView.Frame;
            nfloat height = 0;
            if (frame.Size.Height > frameS.Size.Height)
            {
                height = frame.Size.Height - frameS.Size.Height;
                scrollView.Hidden = false;
            }
            else
            {
                height = frame.Size.Height + frameS.Size.Height;
                scrollView.Hidden = true;
            }
            tableView.Frame = new CoreGraphics.CGRect(frame.X, frame.Y, frame.Size.Width, height);
        }

        partial void onClickInventorySessionButton(UIButton sender)
        {
            pickerView.Tag = PICKER_VIEW_INVENTORY_SESSION;
            pickerView.ReloadAllComponents();
            pickerView.Select((int)inventorySession, 0, false);
            pickerView.Hidden = false;
            powerGainPickerTopView.Hidden = false;
        }
        partial void onClickSessionFlagButton(UIButton sender)
        {
            pickerView.Tag = PICKER_VIEW_SESSION_FLAG;
            pickerView.ReloadAllComponents();
            pickerView.Select((int)sessionFlag, 0, false);
            pickerView.Hidden = false;
            powerGainPickerTopView.Hidden = false;
        }
#pragma mark - Getters
        NSArray inventorySessionPickerData()
        {
            return NSArray.FromStrings(appDelegate.DATA_INVENTORY_SESSION);
        }
        NSArray sessionFlagPickerData()
        {
            return NSArray.FromStrings(appDelegate.DATA_SESSION_FLAG);
        }

#pragma mark - Custom
        void hidePickerView()
        {
            powerGainPickerTopView.Hidden = true;
            pickerView.Hidden = true;
        }
        void setInventorySession(SessionType _inventorySession)
        {
            NSArray data = inventorySessionPickerData();
            NSString str = data.GetItem<NSString>((uint)_inventorySession);
            inventorySessionTextField.Text = str.ToString();
            inventorySession = _inventorySession;
        }
        void setPowerGain(long power)
        {
            NSString value = new NSString(power + ".0 dB");
            int idx = powerGainPickerData.IndexOf(value);
            if (powerGainPickerData.Count > idx)
            {
                powerGainTextField.Text = powerGainPickerData[idx];            
            }
        }
        void setSessionFlag(SessionFlag _sessionFlag)
        {
            NSArray data = sessionFlagPickerData();
            NSString str = data.GetItem<NSString>((uint)_sessionFlag);
            sessionFlagTextField.Text = str.ToString();
            sessionFlag = _sessionFlag;
        }
        void enableControlByActionState()
        {
            if (mReader.Action == CommandType.Stop)
            {
                inventoryBtn.SetTitle("Inventory",UIControlState.Normal);
                mLastTime = 0;
                currentTagCount = mTotalTagCount;
                foreach (UIControl control in toDisableElems)
                {
                    control.Enabled = true;
                }
                csvOutputBtn.Enabled = true;
                tableView.UserInteractionEnabled = true;
            }
        }
        void setOperationTime(string operationTime)
        {
            operationTimeTextField.Text = operationTime;
        }

        [Export("changStatus")]
        void changStatus()
        {
            isCanScan = true;
        }
        #pragma mark - Navigation
        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if(segue.Identifier == "ReadMemory")
            {
                ReadMemoryViewController destinationController = (ReadMemoryViewController)segue.DestinationViewController;
                NSIndexPath indexPath = (NSIndexPath)sender;
                destinationController.maskValue = appDelegate.rfidData[indexPath.Row].tag;
            }else if(segue.Identifier == "WriteMemory")
            {
                WriteMemoryViewController destinationController = (WriteMemoryViewController)segue.DestinationViewController;
                NSIndexPath indexPath = (NSIndexPath)sender;
                destinationController.maskValue = appDelegate.rfidData[indexPath.Row].tag;
            }else if (segue.Identifier == "LockMemory")
            {
                TagAccessViewController destinationController = (TagAccessViewController)segue.DestinationViewController;
                NSIndexPath indexPath = (NSIndexPath)sender;
                destinationController.maskValue = appDelegate.rfidData[indexPath.Row].tag;
            }
        }
        #pragma mark - Storyboard Segue
        public override void PrepareForInterfaceBuilder()
        {
            
        }

        class MyTableViewDelegate : UITableViewDelegate
        {
            InventoryViewController currentViewContorller;
            public MyTableViewDelegate(InventoryViewController controller)
            {
                currentViewContorller = controller;
            }

            public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
            {
                if (currentViewContorller.mReader.Action != CommandType.Stop)
                {
                    return;
                }

                UIAlertController alert = UIAlertController.Create("Additional Actions", "You can choose one of the following actions for this Tag", UIAlertControllerStyle.Alert);
                alert.AddAction(UIAlertAction.Create("Read Memory",UIAlertActionStyle.Default,Action =>{
                    currentViewContorller.PerformSegue("ReadMemory",indexPath);
                }));

                alert.AddAction(UIAlertAction.Create("Write Memory", UIAlertActionStyle.Default, Action => {
                    currentViewContorller.PerformSegue("WriteMemory", indexPath);
                }));

                alert.AddAction(UIAlertAction.Create("Lock Memory", UIAlertActionStyle.Default, Action => {
                    currentViewContorller.PerformSegue("LockMemory", indexPath);
                }));

                alert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Default, Action => {
                }));

                currentViewContorller.PresentViewController(alert,true,null);
            }
        }

        class MyTableViewSource : UITableViewDataSource
        {
            InventoryViewController currentViewContorller;
            public MyTableViewSource(InventoryViewController controller)
            {
                currentViewContorller = controller;
            }
            
            public override nint NumberOfSections(UITableView tableView)
            {
                return 1;
            }

            public override nint RowsInSection(UITableView tableView, nint section)
            {
                return (nint)currentViewContorller.appDelegate.rfidData.Count;
            }

            public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
            {
                InventoryTableViewCell cell = (InventoryTableViewCell)tableView.DequeueReusableCell("InventoryCell", indexPath);                
                AsTagitem item = currentViewContorller.appDelegate.rfidData[indexPath.Row];
                if (item != null)
                {
                    if (currentViewContorller.displayPcSwitch.On)
                    {
                        cell.tagLabel.Text = item.tag;
                    }else
                    {
                        cell.tagLabel.Text = item.tag.Substring(currentViewContorller.define.TAG_PC_LENGTH);
                    }

                    cell.countLabel.Text = item.count.ToString();

                    if (currentViewContorller.reportRssiSwitch.On)
                    {
                        cell.rssiLabel.Text = Math.Round(item.rssi, 1).ToString() + "dB";
                        cell.phaseLabel.Text = ((int)item.phase).ToString() + "˚";
                        cell.frequency.Text = Math.Round(item.frequency, 2) + "MHz";
                    }else
                    {
                        cell.rssiLabel.Text = "";
                        cell.phaseLabel.Text = "";
                        cell.frequency.Text = "";
                    }
                }

                return cell;
            }

        }

        class MyPickerViewDataSource : UIPickerViewDataSource
        {
            InventoryViewController currentViewContorller;
            public MyPickerViewDataSource(InventoryViewController controller)
            {
                currentViewContorller = controller;
            }

            public override nint GetComponentCount(UIPickerView pickerView)
            {
                return 1;
            }

            public override nint GetRowsInComponent(UIPickerView pickerView, nint component)
            {
                //throw new NotImplementedException();
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_POWER_GAIN)
                {
                    return (nint)currentViewContorller.powerGainPickerData.Count;
                }
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_INVENTORY_SESSION)
                {
                    return (nint)currentViewContorller.inventorySessionPickerData().Count;
                }
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_SESSION_FLAG)
                {
                    return (nint)currentViewContorller.sessionFlagPickerData().Count;
                }
                return 0;
            }
        }

        private class MyPickerViewDelegate : UIPickerViewDelegate
        {
            InventoryViewController currentViewContorller;
            public MyPickerViewDelegate(InventoryViewController controller)
            {
                currentViewContorller = controller;
            }

            public override string GetTitle(UIPickerView pickerView, nint row, nint component)
            {
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_POWER_GAIN)
                {
                    return currentViewContorller.powerGainPickerData[(int)row];
                }
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_INVENTORY_SESSION)
                {
                    return currentViewContorller.inventorySessionPickerData().GetItem<NSString>((uint)row).ToString();
                }
                if (pickerView.Tag == currentViewContorller.PICKER_VIEW_SESSION_FLAG)
                {
                    return currentViewContorller.sessionFlagPickerData().GetItem<NSString>((uint)row).ToString();
                }
                return "None";
            }
        }
#pragma mark - UITextViewDelegate
        class MyTextFieldDelegate : UITextFieldDelegate
        {
            InventoryViewController currentViewContorller;
            public MyTextFieldDelegate(InventoryViewController controller)
            {
                currentViewContorller = controller;
            }
            public override bool ShouldBeginEditing(UITextField textField)
            {
                return false;
            }
        }
#pragma mark - UIAlertViewDelegate
        class MyAlertViewDelegate : UIAlertViewDelegate
        {
            InventoryViewController currentViewContorller;
            public MyAlertViewDelegate(InventoryViewController controller)
            {
                currentViewContorller = controller;
            }

            public override void Clicked(UIAlertView alertview, nint buttonIndex)
            {
                if (alertview.Tag == currentViewContorller.ALERT_VIEW_OPERATION_TIME)
                {
                    if (buttonIndex == 1)
                    {
                        UITextField textfield = alertview.GetTextField(0);
                        if (textfield != null)
                        {
                            string str = alertview.GetTextField(0).Text;
                            if (str == "") str = "0";
                            int operationTime = int.Parse(str);
                            currentViewContorller.setOperationTime(str);
                            currentViewContorller.mReader.OperationTime = operationTime;
                            currentViewContorller.systemSetting.setOperationTime(operationTime);
                        }

                    }
                }
            }
        }
    }
}
