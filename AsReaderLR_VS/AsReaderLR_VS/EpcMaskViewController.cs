// This file has been autogenerated from a class added in the UI designer.

using System;
using AsReaderGunSDK;
using Foundation;
using UIKit;

namespace AsReaderLR_VS
{
	public partial class EpcMaskViewController : UIViewController
	{
        bool isEditCell;
        AppDelegate appDelegate;
        SystemSetting systemSetting;

        NSMutableArray maskData = new NSMutableArray();
        Define define;

        AsReaderGUNManager gunManager = AsReaderGUNManager.sharedAsReaderGUNManager();

        AsReader mReader
        {
            get => gunManager.getCurrentAsReader();
        }

		public EpcMaskViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            enableActionWidgets(false);
            systemSetting = SystemSetting.sharedSystemSetting();
            appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
            tableView.DataSource = new MyTableViewSource(this);
            tableView.Delegate = new MyTableViewDelegate(this);

            cancelBtn.TouchUpInside += (object sender, EventArgs e) => {
                NavigationController.PopViewController(true);
            };

            define = Define.sharedDefine();
            AppDelegate.showGlobalProgressHUDWithTitle("Loading...");
            if (mReader == null)
            {
                AppDelegate.dismissGlobalHUD();
                return;
            }
            bool matchMode = mReader.EpcMaskMatchMode;
            initLoadMask();
            matchModeSwitch.On = matchMode;
            AppDelegate.dismissGlobalHUD();
        }
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            isEditCell = false;
            gunManager.onAsReaderGUNDisconnected = () => {
                AppDelegate.dismissGlobalHUD();
                NavigationController.PopToRootViewController(true);
            };
            gunManager.onAsReaderLeftModeKeyEvent = (status) => OnAsReaderLeftModeKeyEvent(status);
            gunManager.onAsReaderRightModeKeyEvent = (status) => OnAsReaderRightModeKeyEvent(status);
        }
        bool OnAsReaderLeftModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }

        bool OnAsReaderRightModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            gunManager.init();
        }
        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
        }
        #pragma mark - IBAction
        partial void saveBtnTapped(NSObject sender)
        {
            enableActionWidgets(false);
            AppDelegate.showGlobalProgressHUDWithTitle("Saving...");
            ResultCode code = mReader.ClearEpcMask;
            for (nuint i = 0; i < maskData.Count; i++)
            {
                AsSelectMaskEPCParam param = maskData.GetItem<AsSelectMaskEPCParam>(i);
                mReader.AddEpcMask(param);
            }

            if (matchModeSwitch.On)
            {
                mReader.EpcMaskMatchMode = true;
                systemSetting.setEpcMaskMatchMode(true);
            }
            else
            {
                mReader.EpcMaskMatchMode = false;
                systemSetting.setEpcMaskMatchMode(false);
            }
            systemSetting.setSelectionEpcMaskData(maskData);
            AppDelegate.dismissGlobalHUD();
            UIAlertView alert = new UIAlertView("Success", "Saved successfully", null, "OK", null);
            alert.Show();
            NavigationController.PopViewController(true);
        }
        #pragma mark - Custom
        void initLoadMask()
        {
            for (int i = 0; i < mReader.EpcMaskCount; i++)
            {
                AsSelectMaskEPCParam param = mReader.GetEpcMask(i);
                maskData.Add(param);
            }
            tableView.ReloadData();
            enableActionWidgets(true);
        }
        public void enableActionWidgets(bool enabled)
        {
            nuint count = maskData.Count;
            addBarButtonItem.Enabled = enabled && (int)count < define.MAX_SELECTION_MASK;
            saveBtn.Enabled = enabled;
            cancelBtn.Enabled = enabled;
        }
        #pragma mark - Navigation
        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "EpcMaskCell")
            {
                EpcMaskEditViewController vc = (EpcMaskEditViewController)segue.DestinationViewController;
                NSIndexPath indexPath = tableView.IndexPathForCell((UITableViewCell)sender);
                vc.selectMaskParam = maskData.GetItem<AsSelectMaskEPCParam>((nuint)indexPath.Row);
                isEditCell = true;
            }    
        }
#pragma mark - Storyboard Segue
        partial void prepareForUnwind(UIStoryboardSegue segue)
        {
            EpcMaskEditViewController sourceViewController = (EpcMaskEditViewController)segue.SourceViewController;
            if (!isEditCell)
            {
                maskData.Add(sourceViewController.selectMaskParam);
            }
            tableView.ReloadData();
        }
        private class MyTableViewDelegate : UITableViewDelegate
        {
            EpcMaskViewController currentViewContorller;
            public MyTableViewDelegate(EpcMaskViewController controller)
            {
                currentViewContorller = controller;
            }

            public override UITableViewCellEditingStyle EditingStyleForRow(UITableView tableView, NSIndexPath indexPath)
            {
                return UITableViewCellEditingStyle.Delete;
            }
        }

        private class MyTableViewSource : UITableViewDataSource
        {
            EpcMaskViewController currentViewContorller;
            public MyTableViewSource(EpcMaskViewController controller)
            {
                currentViewContorller = controller;
            }

            public override nint NumberOfSections(UITableView tableView)
            {
                return 1;
            }

            public override nint RowsInSection(UITableView tableView, nint section)
            {
                return (nint)currentViewContorller.maskData.Count;
            }

            public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
            {
                EpcMaskTableViewCell cell = (EpcMaskTableViewCell)tableView.DequeueReusableCell("EpcMaskCell", indexPath);
                AsSelectMaskEPCParam maskParam = currentViewContorller.maskData.GetItem<AsSelectMaskEPCParam>((nuint)indexPath.Row);
                if (maskParam != null && cell != null)
                {
                    cell.offsetLabel.Text = ((uint)maskParam.Offset).ToString() + "bit";
                    cell.lengthLabel.Text = ((uint)maskParam.Length).ToString() + "bit";
                    cell.maskLabel.Text = maskParam.Mask;
                }

                return cell;
            }

            public override void CommitEditingStyle(UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath)
            {
                currentViewContorller.maskData.RemoveObject(indexPath.Row);
                tableView.ReloadData();
            }
        }
	}
}
