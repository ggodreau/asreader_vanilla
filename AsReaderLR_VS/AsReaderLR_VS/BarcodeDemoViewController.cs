// This file has been autogenerated from a class added in the UI designer.

using System;
using AsReaderGunSDK;
using Foundation;
using UIKit;
using System.Timers;

namespace AsReaderLR_VS
{
	public partial class BarcodeDemoViewController : UIViewController
	{
        AppDelegate appDelegate;
        bool isScanning;
        SystemSetting systemSetting;

        string[] rescanTimePickerData = {"Not Used", "100 ms", "200 ms", "300 ms", "400 ms", "500 ms", "600 ms", "700 ms",
             "800 ms", "900 ms", "1000 ms", "1100 ms", "1200 ms", "1300 ms",
            "1500 ms", "2000 ms", "2500 ms", "3000 ms", "3500 ms", "5000 ms"};
        string[] rescanTimeData = {"0", "100", "200", "300", "400", "500",
             "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1500", "2000", "2500", "3000",
            "3500", "5000"};

        int rescanTimeValue;

        static Timer resCanTimer = new Timer();

        NSDateFormatter formatter = new NSDateFormatter();

        AsReaderGUNManager gunManager = AsReaderGUNManager.sharedAsReaderGUNManager();

        AsReader mReader
        {
            get => gunManager.getCurrentAsReader();
        }

		public BarcodeDemoViewController (IntPtr handle) : base (handle)
		{
		}
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            resCanTimer.Elapsed += (delegate {
                if (isScanning)
                {
                    NSOperationQueue.MainQueue.AddOperation(new Action(delegate {
                        resCanTimer.Enabled = false;
                        ResultCode code = mReader.StartDecode;
                    }));
                }
            });

            formatter.DateStyle = NSDateFormatterStyle.Medium;
            formatter.TimeStyle = NSDateFormatterStyle.Short;
            formatter.DateFormat = "YYYY/MM/dd HH:mm:ss";

            appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
            pickerView.DataSource = new MyPickerViewDataSource(this);
            pickerView.Delegate = new MyPickerViewDelegate(this);
            tableView.DataSource = new MyTableViewSource(this);
            tableView.Delegate = new MyTableViewDelegate(this);
            systemSetting = SystemSetting.sharedSystemSetting();

            rescanTimeTextField.Text = rescanTimePickerData[systemSetting.getBarcodeReScanTime()];
            rescanTimeValue = systemSetting.getBarcodeReScanTime();
            totalCountLabel.Text = appDelegate.barcodeData.Count.ToString();
            AppDelegate.showGlobalProgressHUDWithTitle("Loading...");
        }
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            gunManager.onAsReaderGUNDisconnected = () => {
                AppDelegate.dismissGlobalHUD();
                NavigationController.PopToRootViewController(true);
            };
            gunManager.onAsReaderLeftModeKeyEvent = (status) => OnAsReaderLeftModeKeyEvent(status);
            gunManager.onAsReaderRightModeKeyEvent = (status) => OnAsReaderRightModeKeyEvent(status);
            gunManager.onAsReaderTriggerKeyEvent = (status) => OnAsReaderTriggerKeyEvent(status);
            gunManager.updateDeviceState = (error) => UpdateDeviceState(error);
            gunManager.changedActionState = (action, resultCode) => ChangedActionState(action, resultCode);
            gunManager.detectBarcode = (barcodeType, codeId, barcode) => DetectBarcode(barcodeType,codeId,barcode);
        }
        bool OnAsReaderTriggerKeyEvent(bool status)
        {
            isScanning = status;
            scanElemEnabled(!isScanning);
            return true;
        }
        bool OnAsReaderLeftModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }

        bool OnAsReaderRightModeKeyEvent(bool status)
        {
            if (mReader.IsRFIDModule && mReader.IsBarcodeModule)
            {
                return true;
            }
            return false;
        }
        void UpdateDeviceState(ResultCode error)
        {
            if (error != ResultCode.NoError)
            {
                UIAlertView alert = new UIAlertView("Error", "Failed to get response. Try again.", null, "OK", null);
                alert.Show();
                NavigationController.PopViewController(true);
            }
        }
        void ChangedActionState(CommandType action, nint resultCode)
        {
            if (action == CommandType.Stop)
            {
                int rescanTime = int.Parse(rescanTimeData[rescanTimeValue]);
                if (rescanTime > 0 && isScanning)
                {
                    resCanTimer.Interval = rescanTime;
                    resCanTimer.Enabled = true;
                }
                else
                {
                    scanElemEnabled(true);
                }
            }

        }
        void DetectBarcode(BarcodeType barcodeType, string codeId, string barcode)
        {
                    if (barcodeType != BarcodeType.NoRead)
                    {
                        AsBarcodeItem item = new AsBarcodeItem();
                        item.barcodeType = barcodeType;
                        item.codeId = codeId;
                        item.barcode = barcode;
                        item.dateTime = formatter.ToString(NSDate.Now);
                        appDelegate.barcodeData.Add(item);
                        int count = appDelegate.barcodeData.Count;
                        totalCountLabel.Text = count.ToString();
                        NSIndexPath indexPath = NSIndexPath.FromRowSection((nint)count - 1, 0);
                        tableView.ReloadData();
                        tableView.ScrollToRow(indexPath, UITableViewScrollPosition.Bottom, true);
                    }
        }

        public override void ViewDidAppear(bool animated)
        {
            mReader.SetBarcodeMode(true,true);
            AppDelegate.dismissGlobalHUD();
            mReader.SetScanMode(ScanMode.BarcodeScanMode);
        }
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            gunManager.init();
            if (mReader != null)
            {
                mReader.SetScanMode(ScanMode.RFIDScanMode);
                mReader.SetBarcodeMode(false, false);
            }
        }
        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
        }
        partial void clearBtnTapped(NSObject sender)
        {
            appDelegate.barcodeData.RemoveRange(0, appDelegate.barcodeData.Count);
            tableView.ReloadData();
            totalCountLabel.Text = "0";
        }
        partial void scanStartBtnTapped(NSObject sender)
        {
            scanEnabled(!isScanning);
        }
        partial void rescanTimeBtnTapped(NSObject sender)
        {
            pickerView.Hidden = false;
            pickerView.Select(rescanTimeValue, 0, false);
            rescanTimePickerTopView.Hidden = false;
        }
        partial void pickerCloseBtnTapped(NSObject sender)
        {
            hidePickerView();
        }
        partial void rescanTimePickerOkBtnTapped(NSObject sender)
        {
            int idx = (int)pickerView.SelectedRowInComponent(0);
            rescanTimeTextField.Text = rescanTimePickerData[idx];
            rescanTimeValue = idx;
            systemSetting.setBarcodeReScanTime(rescanTimeValue);
            hidePickerView();
        }
        partial void outputCSVBtnTapped(NSObject sender)
        {

        }
        #pragma mark - Custom
        void hidePickerView()
        {
            pickerView.Hidden = true;
            rescanTimePickerTopView.Hidden = true;
        }
        void scanEnabled(bool enabled)
        {
            if(enabled)
            {
                scanElemEnabled(false);
                ResultCode code = mReader.StartDecode;
            }
            else
            {
                scanElemEnabled(true);
                ResultCode code = mReader.StopSync;
            }
        }
        void scanElemEnabled(bool enabled)
        {
            if (enabled)
            {
                isScanning = false;

                startScanBtn.SetTitle("Start Scan",UIControlState.Normal);
                foreach(UIControl control in toDisableElems)
                {
                    control.Enabled = true;
                }
                outputBtn.Enabled = true;
            }
            else
            {
                isScanning = true;

                startScanBtn.SetTitle("Stop Scan", UIControlState.Normal);
                foreach (UIControl control in toDisableElems)
                {
                    control.Enabled = false;
                }
                outputBtn.Enabled = false;
            }
        }

        private class MyTableViewDelegate : UITableViewDelegate
        {
            BarcodeDemoViewController currentViewContorller;
            public MyTableViewDelegate(BarcodeDemoViewController controller)
            {
                currentViewContorller = controller;
            }

            public override UITableViewCellEditingStyle EditingStyleForRow(UITableView tableView, NSIndexPath indexPath)
            {
                return UITableViewCellEditingStyle.Delete;
            }
        }

        private class MyTableViewSource : UITableViewDataSource
        {
            BarcodeDemoViewController currentViewContorller;
            public MyTableViewSource(BarcodeDemoViewController controller)
            {
                currentViewContorller = controller;
            }

            public override nint NumberOfSections(UITableView tableView)
            {
                return 1;
            }

            public override nint RowsInSection(UITableView tableView, nint section)
            {
                return currentViewContorller.appDelegate.barcodeData.Count;
            }

            public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
            {
                BarcodeDemoTableViewCell cell = (BarcodeDemoTableViewCell)tableView.DequeueReusableCell("BarcodeCell", indexPath);
                AsBarcodeItem item = currentViewContorller.appDelegate.barcodeData[indexPath.Row];
                if (item != null && cell != null)
                {
                    cell.codeTypeLabel.Text = AsBarcodeType.GetBarcodeString(item.barcodeType);
                    cell.codeIdLabel.Text = item.codeId;
                    cell.barcodeLabel.Text = item.barcode;
                }
                return cell;
            }
        }
        #pragma mark - UIPickerViewDelegate
        private class MyPickerViewDelegate : UIPickerViewDelegate
        {
            BarcodeDemoViewController currentViewContorller;
            public MyPickerViewDelegate(BarcodeDemoViewController controller)
            {
                currentViewContorller = controller;
            }

            public override string GetTitle(UIPickerView pickerView, nint row, nint component)
            {
                return currentViewContorller.rescanTimePickerData[row];
            }
        }
        private class MyPickerViewDataSource : UIPickerViewDataSource
        {
            BarcodeDemoViewController currentViewContorller;
            public MyPickerViewDataSource(BarcodeDemoViewController controller)
            {
                currentViewContorller = controller;
            }

            public override nint GetComponentCount(UIPickerView pickerView)
            {
                return 1;
            }

            public override nint GetRowsInComponent(UIPickerView pickerView, nint component)
            {
                return currentViewContorller.rescanTimePickerData.Length;
            }
        }
	}
}
